{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"#introduction-to-diffusion-models","title":"Introduction to Diffusion Models","text":"<p>Welcome to the Introduction to Diffusion Models workshop offered by the Accelerate Programme for Scientific Discovery. In this workshop, we will learn how to build a diffusion model from scratch!</p> <p>This workshop was originally delivered in-person at the University of Cambridge, but we have made the slides and some of the material available here for you to work through at your own pace.</p> <p>In the main GitHub repository, there is a <code>notebooks</code> folder that contains the Jupyter notebooks that we used in the workshop. These notebooks are designed to be run on a local machine, and we recommend that you use a machine with a GPU to run them. If you don't have a GPU, you can use Google Colab to run the notebooks. Contained within the main repository is also a folder <code>diffusion_models</code> that contains the code for the Diffusion Models that we build in the workshop.</p> <p>  Notebooks </p> <p>This workshop is roughly divided into the following sections:</p>"},{"location":"#introduction","title":"Introduction","text":"<p>An overview of the Accelerate Programme, and the history of image generation, including VAEs, GANs, and Diffusion</p>"},{"location":"#physics","title":"Physics","text":"<p>How we can draw inspiration from the world of physics by exploring diffusion in fluids and charge distributions.</p>"},{"location":"#building-blocks","title":"Building Blocks","text":"<p>An overview of the building blocks of the Stable Diffusion model. We have a detailed look at:</p> <ul> <li> <p>VAEs</p> </li> <li> <p>UNet</p> <ul> <li>Segmetation</li> <li>CNNs</li> <li>Residual connections</li> <li>Upsampling, pooling and normalization</li> </ul> </li> <li>CLIP</li> </ul> <p>Included in this is some example code that aims to build each of these components from scratch in a manner that will run on a local machine (such as a laptop or Macbook).</p>"},{"location":"#the-ddpm-algorithm","title":"The DDPM algorithm","text":"<p>We take a deep dive into the Denoising Diffusion Probabilistic Model algorithm and implement it ourselves using the components that we have already built. We also introduce the Hugging Face Diffusers library to make our lives easier.</p>"},{"location":"#applications-of-diffusion-models","title":"Applications of diffusion models","text":"<p>How people are using diffusion models in scientific research, and how are they being improved.</p>"},{"location":"#ethics","title":"Ethics","text":"<p>We look at three different ethics case studies and give you the opportunity to present your thoughts and opinions on generative AI in society and research.</p>"},{"location":"Applications/","title":"Applications and Evaluation","text":""},{"location":"Applications/#applications-and-evaluation","title":"Applications and Evaluation","text":""},{"location":"BuildingBlocks/","title":"The Building Blocks of Diffusion Models","text":""},{"location":"BuildingBlocks/#the-building-blocks-of-diffusion-models","title":"The Building Blocks of Diffusion Models","text":""},{"location":"BuildingBlocks/1_VAEs/","title":"Auto Encoders and VAEs","text":"In\u00a0[125]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\n</pre> import matplotlib.pyplot as plt import numpy as np import torch import torch.nn as nn import torch.optim as optim from sklearn.decomposition import PCA from sklearn.model_selection import train_test_split from torch.utils.data import DataLoader, Dataset from torchvision import datasets, transforms In\u00a0[126]: Copied! <pre>DATA_PATH = '../data/'\n</pre> DATA_PATH = '../data/' In\u00a0[55]: Copied! <pre>class MNISTDataset(Dataset):\n    def __init__(self, dataset):\n        self.dataset = dataset\n\n    def __len__(self):\n        return len(self.dataset)\n\n    def __getitem__(self, idx):\n        image, label = self.dataset[idx]\n        target = image.clone()\n        # onehot labels\n        labels = np.zeros(10)\n        labels[label] = 1\n        \n        return image, target, torch.tensor(labels, dtype=torch.float32)\n    \ntransform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\ntrain_dataset = datasets.MNIST(root=DATA_PATH, train=True, download=True, transform=transforms.ToTensor())\ntest_dataset = datasets.MNIST(root=DATA_PATH, train=False, download=True, transform=transforms.ToTensor())\n\ntrain_dataset = MNISTDataset(train_dataset)\ntest_dataset = MNISTDataset(test_dataset)\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=True)\n</pre> class MNISTDataset(Dataset):     def __init__(self, dataset):         self.dataset = dataset      def __len__(self):         return len(self.dataset)      def __getitem__(self, idx):         image, label = self.dataset[idx]         target = image.clone()         # onehot labels         labels = np.zeros(10)         labels[label] = 1                  return image, target, torch.tensor(labels, dtype=torch.float32)      transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]) train_dataset = datasets.MNIST(root=DATA_PATH, train=True, download=True, transform=transforms.ToTensor()) test_dataset = datasets.MNIST(root=DATA_PATH, train=False, download=True, transform=transforms.ToTensor())  train_dataset = MNISTDataset(train_dataset) test_dataset = MNISTDataset(test_dataset)  train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True) test_loader = DataLoader(test_dataset, batch_size=32, shuffle=True) <p>We make a custom dataset and a function to add noise to the digits</p> In\u00a0[56]: Copied! <pre>def add_noise(x, noise_factor):\n    noisy_x =  (1-noise_factor)*x + noise_factor * torch.randn(x.size())\n    return noisy_x\n</pre> def add_noise(x, noise_factor):     noisy_x =  (1-noise_factor)*x + noise_factor * torch.randn(x.size())     return noisy_x <p>Plot some digits with added noise to see what they look like.</p> In\u00a0[63]: Copied! <pre>sample_x = next(iter(train_loader))[0]\nsample_x = sample_x[:10]\n\neps = np.linspace(0, 0.5, 20)\n\nfig, axs = plt.subplots(10, 20, figsize=(20, 10))\nfor i in range(10):\n    for j in range(20):\n        axs[i, j].imshow(add_noise(sample_x[i], eps[j]).squeeze(), cmap='gray')\n        axs[i, j].axis('off')\n</pre> sample_x = next(iter(train_loader))[0] sample_x = sample_x[:10]  eps = np.linspace(0, 0.5, 20)  fig, axs = plt.subplots(10, 20, figsize=(20, 10)) for i in range(10):     for j in range(20):         axs[i, j].imshow(add_noise(sample_x[i], eps[j]).squeeze(), cmap='gray')         axs[i, j].axis('off') In\u00a0[64]: Copied! <pre>class Autoencoder(torch.nn.Module):\n    def __init__(self):\n        super(Autoencoder, self).__init__()\n        self.encoder = torch.nn.Sequential(\n            torch.nn.Flatten(),\n            torch.nn.Linear(28*28, 128),\n            torch.nn.ReLU(),\n            torch.nn.Linear(128, 32),\n            torch.nn.ReLU(),\n            torch.nn.Linear(32, 8),\n        )\n\n        self.decoder = torch.nn.Sequential(\n            torch.nn.Linear(8, 32),\n            torch.nn.ReLU(),\n            torch.nn.Linear(32, 128),\n            torch.nn.ReLU(),\n            torch.nn.Linear(128, 28*28),\n            torch.nn.Sigmoid()\n        )\n\n\n    def forward(self, x):\n        x = self.encoder(x)\n        x = self.decoder(x)\n        return x\n</pre> class Autoencoder(torch.nn.Module):     def __init__(self):         super(Autoencoder, self).__init__()         self.encoder = torch.nn.Sequential(             torch.nn.Flatten(),             torch.nn.Linear(28*28, 128),             torch.nn.ReLU(),             torch.nn.Linear(128, 32),             torch.nn.ReLU(),             torch.nn.Linear(32, 8),         )          self.decoder = torch.nn.Sequential(             torch.nn.Linear(8, 32),             torch.nn.ReLU(),             torch.nn.Linear(32, 128),             torch.nn.ReLU(),             torch.nn.Linear(128, 28*28),             torch.nn.Sigmoid()         )       def forward(self, x):         x = self.encoder(x)         x = self.decoder(x)         return x In\u00a0[66]: Copied! <pre>img, _, _ = next(iter(train_loader))\nmodel = Autoencoder()\n\nnoisy_img = add_noise(img, 0.5)\nprint(noisy_img.shape)\nprint(img.shape)\n</pre> img, _, _ = next(iter(train_loader)) model = Autoencoder()  noisy_img = add_noise(img, 0.5) print(noisy_img.shape) print(img.shape) <pre>torch.Size([32, 1, 28, 28])\ntorch.Size([32, 1, 28, 28])\n</pre> In\u00a0[67]: Copied! <pre>BATCH_SIZE = 32\n\nmodel = Autoencoder()\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\nn_epochs = 10\n\n\ntrain_loss = []\ntest_loss = []\n\nfor epoch in range(n_epochs):\n    model.train()\n    train_losses = []\n    for img, _, _ in train_loader:\n        # random noise factor between 0 and 0.5\n        noise_factor = np.random.rand() * 0.5\n        noisy_img = add_noise(img, noise_factor)\n        img = img.view(-1, 28*28)\n        noisy_img = noisy_img.view(-1, 28*28)\n        optimizer.zero_grad()\n        outputs = model(noisy_img)\n        loss = criterion(outputs, img)\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n    train_loss.append(np.mean(train_losses))\n\n    model.eval()\n    test_losses = []\n    for img, _, _ in test_loader:\n        noise_factor = np.random.rand()\n        noisy_img = add_noise(img, noise_factor)\n        img = img.view(-1, 28*28)\n        noisy_img = noisy_img.view(-1, 28*28)\n        outputs = model(noisy_img)\n        loss = criterion(outputs, img)\n        test_losses.append(loss.item())\n    test_loss.append(np.mean(test_losses))\n\n    print(f'Epoch {epoch+1}, Train Loss: {train_loss[-1]}, Test Loss: {test_loss[-1]}')\n</pre> BATCH_SIZE = 32  model = Autoencoder() criterion = torch.nn.MSELoss() optimizer = torch.optim.Adam(model.parameters(), lr=0.001)  n_epochs = 10   train_loss = [] test_loss = []  for epoch in range(n_epochs):     model.train()     train_losses = []     for img, _, _ in train_loader:         # random noise factor between 0 and 0.5         noise_factor = np.random.rand() * 0.5         noisy_img = add_noise(img, noise_factor)         img = img.view(-1, 28*28)         noisy_img = noisy_img.view(-1, 28*28)         optimizer.zero_grad()         outputs = model(noisy_img)         loss = criterion(outputs, img)         loss.backward()         optimizer.step()         train_losses.append(loss.item())     train_loss.append(np.mean(train_losses))      model.eval()     test_losses = []     for img, _, _ in test_loader:         noise_factor = np.random.rand()         noisy_img = add_noise(img, noise_factor)         img = img.view(-1, 28*28)         noisy_img = noisy_img.view(-1, 28*28)         outputs = model(noisy_img)         loss = criterion(outputs, img)         test_losses.append(loss.item())     test_loss.append(np.mean(test_losses))      print(f'Epoch {epoch+1}, Train Loss: {train_loss[-1]}, Test Loss: {test_loss[-1]}') <pre>Epoch 1, Train Loss: 0.046116786822676656, Test Loss: 0.050330030663420976\nEpoch 2, Train Loss: 0.03196318965454896, Test Loss: 0.05049621417356756\nEpoch 3, Train Loss: 0.028869882366061212, Test Loss: 0.04967915021573393\nEpoch 4, Train Loss: 0.027470954797665276, Test Loss: 0.04541532442973445\nEpoch 5, Train Loss: 0.026843437445163727, Test Loss: 0.04873806189971801\nEpoch 6, Train Loss: 0.02594687474767367, Test Loss: 0.05087188725916151\nEpoch 7, Train Loss: 0.025647809994220734, Test Loss: 0.04599093878492951\nEpoch 8, Train Loss: 0.0253130910217762, Test Loss: 0.04912061060365206\nEpoch 9, Train Loss: 0.025141460451483726, Test Loss: 0.04853950411128922\nEpoch 10, Train Loss: 0.024699061437447867, Test Loss: 0.04938048413529183\n</pre> In\u00a0[81]: Copied! <pre># sample some images and denoise\nimg, _, _ = next(iter(test_loader))\nnoisy_img = add_noise(img, 0.4)\ndenoised_img = model(noisy_img.view(-1, 28*28)).view(-1, 1, 28, 28)\n\nfig, axs = plt.subplots(3, 10, figsize=(15, 4))\nfor i in range(10):\n    axs[0, i].imshow(img[i].squeeze(), cmap='gray')\n    axs[1, i].imshow(noisy_img[i].squeeze(), cmap='gray')\n    axs[2, i].imshow(denoised_img[i].detach().numpy().squeeze(), cmap='gray')\n    for j in range(3):\n        axs[j, i].axis('off')\n\nplt.show()\n</pre> # sample some images and denoise img, _, _ = next(iter(test_loader)) noisy_img = add_noise(img, 0.4) denoised_img = model(noisy_img.view(-1, 28*28)).view(-1, 1, 28, 28)  fig, axs = plt.subplots(3, 10, figsize=(15, 4)) for i in range(10):     axs[0, i].imshow(img[i].squeeze(), cmap='gray')     axs[1, i].imshow(noisy_img[i].squeeze(), cmap='gray')     axs[2, i].imshow(denoised_img[i].detach().numpy().squeeze(), cmap='gray')     for j in range(3):         axs[j, i].axis('off')  plt.show() <p>Considering, I can't really tell what any of those numbers are on the middle line, that's not terrible.</p> In\u00a0[82]: Copied! <pre>encoder = model.encoder\ndecoder = model.decoder\n</pre> encoder = model.encoder decoder = model.decoder In\u00a0[97]: Copied! <pre># get the latent space of the test images and labels\nlatent_space = []\nlabels = []\nfor img, _, label in test_loader:\n    img = img.view(-1, 28*28)\n    latent_space.append(encoder(img).detach().numpy())\n    label = np.argmax(label.numpy(), axis=1)\n    labels.append(label)\nlatent_space = np.concatenate(latent_space)\nlabels = np.concatenate(labels)\n</pre> # get the latent space of the test images and labels latent_space = [] labels = [] for img, _, label in test_loader:     img = img.view(-1, 28*28)     latent_space.append(encoder(img).detach().numpy())     label = np.argmax(label.numpy(), axis=1)     labels.append(label) latent_space = np.concatenate(latent_space) labels = np.concatenate(labels)  In\u00a0[123]: Copied! <pre># pca\npca = PCA(n_components=3)\nlatent_pca = pca.fit_transform(latent_space)\n\nfig = plt.figure(figsize=(6,6))\nax = fig.add_subplot(111, projection='3d')\ncolors = ['r', 'g', 'b', 'y', 'c', 'm', 'k', 'orange', 'purple', 'brown']\nfor i in range(10):\n    ax.scatter(latent_pca[labels==i, 0], latent_pca[labels==i, 1], latent_pca[labels==i, 2], c=colors[i], label=i, alpha=0.5)\nax.set_xlabel(f\"PCA 1 ({pca.explained_variance_ratio_[0]*100:.2f}%)\")\nax.set_ylabel(f\"PCA 2 ({pca.explained_variance_ratio_[1]*100:.2f}%)\")\nax.set_zlabel(f\"PCA 3 ({pca.explained_variance_ratio_[2]*100:.2f}%)\")\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.1), ncol=5)\nax.set_box_aspect(None, zoom=0.9)\nplt.tight_layout()\nplt.show()\n</pre> # pca pca = PCA(n_components=3) latent_pca = pca.fit_transform(latent_space)  fig = plt.figure(figsize=(6,6)) ax = fig.add_subplot(111, projection='3d') colors = ['r', 'g', 'b', 'y', 'c', 'm', 'k', 'orange', 'purple', 'brown'] for i in range(10):     ax.scatter(latent_pca[labels==i, 0], latent_pca[labels==i, 1], latent_pca[labels==i, 2], c=colors[i], label=i, alpha=0.5) ax.set_xlabel(f\"PCA 1 ({pca.explained_variance_ratio_[0]*100:.2f}%)\") ax.set_ylabel(f\"PCA 2 ({pca.explained_variance_ratio_[1]*100:.2f}%)\") ax.set_zlabel(f\"PCA 3 ({pca.explained_variance_ratio_[2]*100:.2f}%)\") ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.1), ncol=5) ax.set_box_aspect(None, zoom=0.9) plt.tight_layout() plt.show() <p>Let's try to \"generate\" some samples by drawing random numbers from the latent space.</p> In\u00a0[124]: Copied! <pre># sample some values from latent space\nn = 10\nx = torch.randn(n, 8)\nx = decoder(x)\n\nfig, axs = plt.subplots(1, 10, figsize=(10, 1))\nfor i in range(10):\n    axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')\n    axs[i].axis('off')\n\nplt.show()\n</pre> # sample some values from latent space n = 10 x = torch.randn(n, 8) x = decoder(x)  fig, axs = plt.subplots(1, 10, figsize=(10, 1)) for i in range(10):     axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')     axs[i].axis('off')  plt.show() <p>That looks pretty terrible, but you can sort of make out some digits...if you kind of squint.</p> In\u00a0[127]: Copied! <pre>class VAE(nn.Module):\n    def __init__(self):\n        super(VAE, self).__init__()\n        # Encoder\n        self.fc1 = nn.Linear(784, 128)\n        self.fc2 = nn.Linear(128, 32)\n        self.fc3 = nn.Linear(32, 16)\n        # Decoder\n        self.fc4 = nn.Linear(8, 32)\n        self.fc5 = nn.Linear(32, 128)\n        self.fc6 = nn.Linear(128, 784)\n\n    def encode(self, x):\n        h1 = nn.functional.gelu(self.fc1(x))\n        h2 = nn.functional.gelu(self.fc2(h1))\n        h3 = nn.functional.gelu(self.fc3(h2))\n\n        mu, logvar = torch.chunk(h3, 2, dim=1)\n        return mu, logvar\n\n    def reparameterize(self, mu, logvar):\n        std = torch.exp(0.5 * logvar)\n        eps = torch.randn_like(std)\n        return mu + eps * std\n\n    def decode(self, z):\n        h4 = nn.functional.gelu(self.fc4(z))\n        h5 = nn.functional.gelu(self.fc5(h4))\n        return torch.sigmoid(self.fc6(h5))\n\n    def forward(self, x):\n        mu, logvar = self.encode(x.view(-1, 784))\n        z = self.reparameterize(mu, logvar)\n        return self.decode(z), mu, logvar\n</pre> class VAE(nn.Module):     def __init__(self):         super(VAE, self).__init__()         # Encoder         self.fc1 = nn.Linear(784, 128)         self.fc2 = nn.Linear(128, 32)         self.fc3 = nn.Linear(32, 16)         # Decoder         self.fc4 = nn.Linear(8, 32)         self.fc5 = nn.Linear(32, 128)         self.fc6 = nn.Linear(128, 784)      def encode(self, x):         h1 = nn.functional.gelu(self.fc1(x))         h2 = nn.functional.gelu(self.fc2(h1))         h3 = nn.functional.gelu(self.fc3(h2))          mu, logvar = torch.chunk(h3, 2, dim=1)         return mu, logvar      def reparameterize(self, mu, logvar):         std = torch.exp(0.5 * logvar)         eps = torch.randn_like(std)         return mu + eps * std      def decode(self, z):         h4 = nn.functional.gelu(self.fc4(z))         h5 = nn.functional.gelu(self.fc5(h4))         return torch.sigmoid(self.fc6(h5))      def forward(self, x):         mu, logvar = self.encode(x.view(-1, 784))         z = self.reparameterize(mu, logvar)         return self.decode(z), mu, logvar In\u00a0[128]: Copied! <pre>def loss_function(recon_x, x, mu, logvar, beta):\n    MSE = nn.functional.mse_loss(recon_x, x.view(-1, 784), reduction='sum')\n    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n    return MSE + beta*KLD\n</pre> def loss_function(recon_x, x, mu, logvar, beta):     MSE = nn.functional.mse_loss(recon_x, x.view(-1, 784), reduction='sum')     KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())     return MSE + beta*KLD <p>The training process is the same as before, except we have to return the reconstruction, mean and variance from the model in order to calculate the loss. And of course we are using our custom loss function.</p> In\u00a0[140]: Copied! <pre>BATCH_SIZE = 32\n\nmodel = VAE()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\nn_epochs = 10\n\ntrain_loss = []\ntest_loss = []\n\nfor epoch in range(n_epochs):\n    model.train()\n    train_losses = []\n    for img, _, _ in train_loader:\n        # random noise factor between 0 and 1\n        noise_factor = np.random.rand() * 0.5\n        noisy_img = add_noise(img, noise_factor)\n        img = img.view(-1, 28*28)\n        noisy_img = noisy_img.view(-1, 28*28)\n        optimizer.zero_grad()\n        recon_batch, mu, logvar = model(noisy_img)\n        loss = loss_function(recon_batch, img, mu, logvar, beta=0.1)\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n    train_loss.append(np.mean(train_losses))\n\n    model.eval()\n    test_losses = []\n    for img, _, _ in test_loader:\n        noise_factor = np.random.rand()\n        noisy_img = add_noise(img, noise_factor)\n        img = img.view(-1, 28*28)\n        noisy_img = noisy_img.view(-1, 28*28)\n        recon_batch, mu, logvar = model(noisy_img)\n        loss = loss_function(recon_batch, img, mu, logvar, beta=0.1)\n        test_losses.append(loss.item())\n    test_loss.append(np.mean(test_losses))\n\n    print(f'Epoch {epoch+1}, Train Loss: {train_loss[-1]}, Test Loss: {test_loss[-1]}')\n</pre> BATCH_SIZE = 32  model = VAE() optimizer = torch.optim.Adam(model.parameters(), lr=0.001)  n_epochs = 10  train_loss = [] test_loss = []  for epoch in range(n_epochs):     model.train()     train_losses = []     for img, _, _ in train_loader:         # random noise factor between 0 and 1         noise_factor = np.random.rand() * 0.5         noisy_img = add_noise(img, noise_factor)         img = img.view(-1, 28*28)         noisy_img = noisy_img.view(-1, 28*28)         optimizer.zero_grad()         recon_batch, mu, logvar = model(noisy_img)         loss = loss_function(recon_batch, img, mu, logvar, beta=0.1)         loss.backward()         optimizer.step()         train_losses.append(loss.item())     train_loss.append(np.mean(train_losses))      model.eval()     test_losses = []     for img, _, _ in test_loader:         noise_factor = np.random.rand()         noisy_img = add_noise(img, noise_factor)         img = img.view(-1, 28*28)         noisy_img = noisy_img.view(-1, 28*28)         recon_batch, mu, logvar = model(noisy_img)         loss = loss_function(recon_batch, img, mu, logvar, beta=0.1)         test_losses.append(loss.item())     test_loss.append(np.mean(test_losses))      print(f'Epoch {epoch+1}, Train Loss: {train_loss[-1]}, Test Loss: {test_loss[-1]}') <pre>Epoch 1, Train Loss: 1547.2451488932293, Test Loss: 1506.8442189762006\nEpoch 2, Train Loss: 1185.184639420573, Test Loss: 1451.4830653766473\nEpoch 3, Train Loss: 1105.8312452148436, Test Loss: 1421.3219077990839\nEpoch 4, Train Loss: 1076.7601879882814, Test Loss: 1440.888671875\nEpoch 5, Train Loss: 1063.8441948567709, Test Loss: 1441.5076419720635\nEpoch 6, Train Loss: 1053.1476516927082, Test Loss: 1487.5653559773114\nEpoch 7, Train Loss: 1046.3892915039062, Test Loss: 1465.8372675009048\nEpoch 8, Train Loss: 1036.8881911132812, Test Loss: 1390.7111050054289\nEpoch 9, Train Loss: 1032.5023485026043, Test Loss: 1410.592527736871\nEpoch 10, Train Loss: 1026.2633759114583, Test Loss: 1431.3696310512555\n</pre> In\u00a0[142]: Copied! <pre># sample some images and denoise\nimg, _, _ = next(iter(test_loader))\nnoisy_img = add_noise(img, 0.4)\ndenoised_img, _, _ = model(noisy_img.view(-1, 28*28))\n\nfig, axs = plt.subplots(3, 10, figsize=(15, 4))\nfor i in range(10):\n    axs[0, i].imshow(img[i].squeeze(), cmap='gray')\n    axs[1, i].imshow(noisy_img[i].squeeze(), cmap='gray')\n    axs[2, i].imshow(denoised_img[i].detach().numpy().squeeze().reshape((28,28)), cmap='gray')\n    for j in range(3):\n        axs[j, i].axis('off')\n\nplt.show()\n</pre> # sample some images and denoise img, _, _ = next(iter(test_loader)) noisy_img = add_noise(img, 0.4) denoised_img, _, _ = model(noisy_img.view(-1, 28*28))  fig, axs = plt.subplots(3, 10, figsize=(15, 4)) for i in range(10):     axs[0, i].imshow(img[i].squeeze(), cmap='gray')     axs[1, i].imshow(noisy_img[i].squeeze(), cmap='gray')     axs[2, i].imshow(denoised_img[i].detach().numpy().squeeze().reshape((28,28)), cmap='gray')     for j in range(3):         axs[j, i].axis('off')  plt.show() In\u00a0[144]: Copied! <pre>n = 10\nx = torch.randn(n, 8)\nx = model.decode(x)\n\nfig, axs = plt.subplots(1, 10, figsize=(10, 1))\nfor i in range(10):\n    axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')\n    axs[i].axis('off')\n\nplt.show()\n</pre> n = 10 x = torch.randn(n, 8) x = model.decode(x)  fig, axs = plt.subplots(1, 10, figsize=(10, 1)) for i in range(10):     axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')     axs[i].axis('off')  plt.show() <p>There is not a whole lot of diversity here. So likely we will need to expand the range that we draw from in order to get more diverse samples.</p> In\u00a0[159]: Copied! <pre># visualize latent space\nlatent_space = []\nlabels = []\nfor img, _, label in test_loader:\n    img = img.view(-1, 28*28)\n    latent_space.append(model.encode(img)[0].detach().numpy())\n    label = np.argmax(label.numpy(), axis=1)\n    labels.append(label)\nlatent_space = np.concatenate(latent_space)\nlabels = np.concatenate(labels)\n</pre> # visualize latent space latent_space = [] labels = [] for img, _, label in test_loader:     img = img.view(-1, 28*28)     latent_space.append(model.encode(img)[0].detach().numpy())     label = np.argmax(label.numpy(), axis=1)     labels.append(label) latent_space = np.concatenate(latent_space) labels = np.concatenate(labels) In\u00a0[160]: Copied! <pre># pca\npca = PCA(n_components=2)\nlatent_pca = pca.fit_transform(latent_space)\n\nfig = plt.figure(figsize=(6,6))\nax = fig.add_subplot(111)\ncolors = ['r', 'g', 'b', 'y', 'c', 'm', 'k', 'orange', 'purple', 'brown']\nfor i in range(10):\n    ax.scatter(latent_pca[labels==i, 0], latent_pca[labels==i, 1], c=colors[i], label=i, alpha=0.5)\nax.set_xlabel(f\"PCA 1 ({pca.explained_variance_ratio_[0]*100:.2f}%)\")\nax.set_ylabel(f\"PCA 2 ({pca.explained_variance_ratio_[1]*100:.2f}%)\")\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.1), ncol=5)\n\nplt.tight_layout()\nplt.show()\n</pre> # pca pca = PCA(n_components=2) latent_pca = pca.fit_transform(latent_space)  fig = plt.figure(figsize=(6,6)) ax = fig.add_subplot(111) colors = ['r', 'g', 'b', 'y', 'c', 'm', 'k', 'orange', 'purple', 'brown'] for i in range(10):     ax.scatter(latent_pca[labels==i, 0], latent_pca[labels==i, 1], c=colors[i], label=i, alpha=0.5) ax.set_xlabel(f\"PCA 1 ({pca.explained_variance_ratio_[0]*100:.2f}%)\") ax.set_ylabel(f\"PCA 2 ({pca.explained_variance_ratio_[1]*100:.2f}%)\") ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.1), ncol=5)  plt.tight_layout() plt.show() <p>As we suspected, drawing from $N(0, 1)$ is not enough to get diverse samples. Let's try drawing from $N(0, 6)$ instead.</p> In\u00a0[166]: Copied! <pre>n = 10\n# draw from N(0,6)\nx = torch.randn(n, 8) * 6\nx = model.decode(x)\n\nfig, axs = plt.subplots(1, 10, figsize=(10, 1))\nfor i in range(10):\n    axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')\n    axs[i].axis('off')\n\nplt.show()\n</pre> n = 10 # draw from N(0,6) x = torch.randn(n, 8) * 6 x = model.decode(x)  fig, axs = plt.subplots(1, 10, figsize=(10, 1)) for i in range(10):     axs[i].imshow(x[i].detach().numpy().reshape(28, 28), cmap='gray')     axs[i].axis('off')  plt.show() <p>Nice! We can see that the samples are much more diverse now. This is our first taste of generative models.</p>"},{"location":"BuildingBlocks/1_VAEs/#auto-encoders-and-vaes","title":"Auto Encoders and VAEs\u00b6","text":"<p>In this notebook we will:</p> <ol> <li>Load MNIST digits and add some noise</li> <li>Train an autoencoder to denoise the images</li> <li>Train a Variational Autoencoder (VAE) to generate new images</li> </ol>"},{"location":"BuildingBlocks/1_VAEs/#load-digits","title":"Load digits\u00b6","text":"<p>We first define some helper functions to load the MNIST digits and add some noise to them.</p>"},{"location":"BuildingBlocks/1_VAEs/#auto-encoder","title":"Auto Encoder\u00b6","text":"<p>This is a really simple auto encoder. It's simple because it is entirely composed of linear layers. We reduce dimensionality of the data from 784 dimensions down to only 8!</p>"},{"location":"BuildingBlocks/1_VAEs/#training","title":"Training\u00b6","text":""},{"location":"BuildingBlocks/1_VAEs/#latent-space-visualization","title":"Latent space visualization\u00b6","text":""},{"location":"BuildingBlocks/1_VAEs/#vae","title":"VAE\u00b6","text":"<p>Let's first build the VAE. This is a bit more complicated than the autoencoder, but not by much. We still have the same number of layers and they are still just linear. The only difference is the forward pass. Since we are encoding our images into a mean and a variance, the final layer of the encoder is actually two layers, one for the mean and one for the variance, which we then split into two:</p> <pre>mu, logvar = torch.chunk(h3, 2, dim=1)\n</pre> <p>We then have to use the reparameterization trick to sample from the latent space. This is done by sampling from a normal distribution and then scaling and shifting the samples by the mean and variance we just calculated:</p> <pre>def reparameterize(self, mu, logvar):\n        std = torch.exp(0.5 * logvar)\n        eps = torch.randn_like(std)\n        return mu + eps * std\n</pre> <p>We use the log variance because it makes our life slightly easier when we calculate the KL divergence.</p>"},{"location":"BuildingBlocks/1_VAEs/#loss-function","title":"Loss function\u00b6","text":"<p>As discussed in the slides, we have two components to the loss function. The first is the reconstruction loss, which is just the mean squared error between the input and the output. The second is the KL divergence, which acts as a regularizer, forcing the latent space to be close to a normal distribution. We also have an additional hyperparamter $\\beta$ which scales the KL divergence term. This is useful because the KL divergence term is not very useful at the start of training, but becomes more important as the model gets better.</p>"},{"location":"BuildingBlocks/1_VAEs/#things-to-try","title":"Things to try:\u00b6","text":"<ol> <li>Add convolutional layers to the VAE</li> <li>Optimize the hyperparameters, particularly $\\beta$</li> <li>Try a different dataset like CIFAR-10</li> <li>Try a bigger model and run it on a GPU</li> </ol>"},{"location":"BuildingBlocks/2_CLIP/","title":"CLIP","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm import tqdm\n</pre> import matplotlib.pyplot as plt import numpy as np import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler from torch.utils.data import DataLoader, Dataset from torchvision import datasets, transforms from tqdm import tqdm <p>We have extracted the data loading utilities into a separate folder called <code>diffusion_models</code>.</p> In\u00a0[2]: Copied! <pre># add diffusion models to path\nimport sys\nsys.path.append('..')\nfrom diffusion_models import utils\n\nDATA_PATH = '../data/'\ntrain_loader, test_loader = utils.get_mnist(32, DATA_PATH)\n</pre> # add diffusion models to path import sys sys.path.append('..') from diffusion_models import utils  DATA_PATH = '../data/' train_loader, test_loader = utils.get_mnist(32, DATA_PATH) In\u00a0[4]: Copied! <pre>class DigitEncoder(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.encoder = torch.nn.Sequential(\n            nn.Conv2d(1, 4, 3, stride=2, padding=1),\n            nn.SiLU(),\n            nn.Conv2d(4, 8, 3, stride=2, padding=1),\n            nn.SiLU(),\n            nn.Flatten(start_dim=1),\n            nn.Linear(392, 256),\n            nn.SiLU(),\n            nn.Linear(256, 128),\n            nn.SiLU(),\n            nn.Linear(128, 64)\n        )\n\n    def forward(self, x):\n        return self.encoder(x)\n</pre> class DigitEncoder(nn.Module):     def __init__(self):         super().__init__()         self.encoder = torch.nn.Sequential(             nn.Conv2d(1, 4, 3, stride=2, padding=1),             nn.SiLU(),             nn.Conv2d(4, 8, 3, stride=2, padding=1),             nn.SiLU(),             nn.Flatten(start_dim=1),             nn.Linear(392, 256),             nn.SiLU(),             nn.Linear(256, 128),             nn.SiLU(),             nn.Linear(128, 64)         )      def forward(self, x):         return self.encoder(x) In\u00a0[35]: Copied! <pre>class LabelEncoder(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.encoder = nn.Sequential(\n            nn.Linear(10, 16),\n            nn.GELU(),\n            nn.Linear(16, 32),\n            nn.GELU(),\n            nn.Linear(32, 64)\n        )\n\n    def forward(self, x):\n        return self.encoder(x)\n</pre> class LabelEncoder(nn.Module):     def __init__(self):         super().__init__()         self.encoder = nn.Sequential(             nn.Linear(10, 16),             nn.GELU(),             nn.Linear(16, 32),             nn.GELU(),             nn.Linear(32, 64)         )      def forward(self, x):         return self.encoder(x) In\u00a0[36]: Copied! <pre>class ProjectionHead(nn.Module):\n    def __init__(self, embedding_dim=64, projection_dim=128):\n        super().__init__()\n        self.projection = nn.Linear(embedding_dim, projection_dim)\n        self.gelu = nn.GELU()\n        self.fc = nn.Linear(projection_dim, projection_dim)\n        self.dropout = nn.Dropout()\n        self.l2_norm = nn.LayerNorm(projection_dim)\n\n    def forward(self, x):\n        projected = self.projection(x)\n        x = self.gelu(projected)\n        x = self.fc(x)\n        x = self.dropout(x)\n        x = x + projected\n        x = self.l2_norm(x)\n        return x\n</pre> class ProjectionHead(nn.Module):     def __init__(self, embedding_dim=64, projection_dim=128):         super().__init__()         self.projection = nn.Linear(embedding_dim, projection_dim)         self.gelu = nn.GELU()         self.fc = nn.Linear(projection_dim, projection_dim)         self.dropout = nn.Dropout()         self.l2_norm = nn.LayerNorm(projection_dim)      def forward(self, x):         projected = self.projection(x)         x = self.gelu(projected)         x = self.fc(x)         x = self.dropout(x)         x = x + projected         x = self.l2_norm(x)         return x In\u00a0[37]: Copied! <pre>class BasicCLIP(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        self.image_encoder = DigitEncoder()\n        self.label_encoder = LabelEncoder()\n        self.temperature = nn.Parameter(torch.tensor(np.log(1/0.07)))\n\n        self.W_i = ProjectionHead(64, 128)\n        self.W_t = ProjectionHead(64, 128)\n\n    def forward(self, imgs, labels):\n        I_f = self.image_encoder(imgs)\n        T_f = self.label_encoder(labels)\n\n        I_e = self.W_i(I_f)\n        T_e = self.W_t(T_f)\n\n        # l2 normalize\n        I_e = F.normalize(I_e, p=2, dim=1)\n        T_e = F.normalize(T_e, p=2, dim=1)\n\n        logits = I_e @ T_e.T * self.temperature\n\n        return logits\n</pre> class BasicCLIP(nn.Module):     def __init__(self):         super().__init__()          self.image_encoder = DigitEncoder()         self.label_encoder = LabelEncoder()         self.temperature = nn.Parameter(torch.tensor(np.log(1/0.07)))          self.W_i = ProjectionHead(64, 128)         self.W_t = ProjectionHead(64, 128)      def forward(self, imgs, labels):         I_f = self.image_encoder(imgs)         T_f = self.label_encoder(labels)          I_e = self.W_i(I_f)         T_e = self.W_t(T_f)          # l2 normalize         I_e = F.normalize(I_e, p=2, dim=1)         T_e = F.normalize(T_e, p=2, dim=1)          logits = I_e @ T_e.T * self.temperature          return logits In\u00a0[38]: Copied! <pre>def loss_function(logits, N):\n    loss_i = F.cross_entropy(logits, torch.arange(N))\n    loss_t = F.cross_entropy(logits.T, torch.arange(N))\n\n    loss = (loss_i + loss_t)/2\n\n    return loss\n</pre> def loss_function(logits, N):     loss_i = F.cross_entropy(logits, torch.arange(N))     loss_t = F.cross_entropy(logits.T, torch.arange(N))      loss = (loss_i + loss_t)/2      return loss In\u00a0[18]: Copied! <pre>BATCH_SIZE = 32\nclip = BasicCLIP()\noptimizer = optim.Adam(clip.parameters(), lr=0.0001)\n\nfor epoch in range(20):\n    for i, (imgs, targets, labels) in enumerate(tqdm(train_loader)):\n        optimizer.zero_grad()\n\n        logits = clip(imgs, labels)\n        loss = loss_function(logits, BATCH_SIZE)\n\n        loss.backward()\n        optimizer.step()\n\n    print(f'Epoch {epoch+1} Loss: {loss.item()}')\n</pre> BATCH_SIZE = 32 clip = BasicCLIP() optimizer = optim.Adam(clip.parameters(), lr=0.0001)  for epoch in range(20):     for i, (imgs, targets, labels) in enumerate(tqdm(train_loader)):         optimizer.zero_grad()          logits = clip(imgs, labels)         loss = loss_function(logits, BATCH_SIZE)          loss.backward()         optimizer.step()      print(f'Epoch {epoch+1} Loss: {loss.item()}') <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 131.50it/s]\n</pre> <pre>Epoch 1 Loss: 1.9742705821990967\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 134.03it/s]\n</pre> <pre>Epoch 2 Loss: 1.7844693660736084\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 139.04it/s]\n</pre> <pre>Epoch 3 Loss: 1.9029688835144043\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 137.46it/s]\n</pre> <pre>Epoch 4 Loss: 1.6381258964538574\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 133.07it/s]\n</pre> <pre>Epoch 5 Loss: 1.5152673721313477\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 133.77it/s]\n</pre> <pre>Epoch 6 Loss: 1.551780104637146\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 137.79it/s]\n</pre> <pre>Epoch 7 Loss: 1.6060250997543335\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 128.94it/s]\n</pre> <pre>Epoch 8 Loss: 1.4457075595855713\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 136.91it/s]\n</pre> <pre>Epoch 9 Loss: 1.6735202074050903\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 126.64it/s]\n</pre> <pre>Epoch 10 Loss: 1.4219145774841309\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 139.20it/s]\n</pre> <pre>Epoch 11 Loss: 1.5235974788665771\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 133.86it/s]\n</pre> <pre>Epoch 12 Loss: 1.5458929538726807\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 137.76it/s]\n</pre> <pre>Epoch 13 Loss: 1.3939533233642578\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 134.52it/s]\n</pre> <pre>Epoch 14 Loss: 1.3812689781188965\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 136.54it/s]\n</pre> <pre>Epoch 15 Loss: 1.2729465961456299\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 134.87it/s]\n</pre> <pre>Epoch 16 Loss: 1.4988949298858643\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 136.52it/s]\n</pre> <pre>Epoch 17 Loss: 1.4808372259140015\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 136.59it/s]\n</pre> <pre>Epoch 18 Loss: 1.3340768814086914\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:14&lt;00:00, 131.13it/s]\n</pre> <pre>Epoch 19 Loss: 1.2895631790161133\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:13&lt;00:00, 137.53it/s]</pre> <pre>Epoch 20 Loss: 1.286539077758789\n</pre> <pre>\n</pre> In\u00a0[42]: Copied! <pre># Evaluate the model\nclip.eval()\npredictions = []\nreal_labels = []\n\nlabels = torch.arange(10)\n# need to be one-hot encoded\nlabels = F.one_hot(labels, num_classes=10).float()\nwith torch.no_grad():\n    for (imgs, targets, true) in tqdm(test_loader):\n        logits = clip(imgs, labels)\n        probs = F.softmax(logits, dim=1)\n\n        pred = torch.argmax(probs, dim=1)\n        predictions.append(pred)\n\n        true = torch.argmax(true, dim=1)\n        real_labels.append(true)\n\npredictions = torch.cat(predictions)\nreal_labels = torch.cat(real_labels)\n        \n        \n(predictions == real_labels).sum().item()/len(predictions)       \n        \n</pre> # Evaluate the model clip.eval() predictions = [] real_labels = []  labels = torch.arange(10) # need to be one-hot encoded labels = F.one_hot(labels, num_classes=10).float() with torch.no_grad():     for (imgs, targets, true) in tqdm(test_loader):         logits = clip(imgs, labels)         probs = F.softmax(logits, dim=1)          pred = torch.argmax(probs, dim=1)         predictions.append(pred)          true = torch.argmax(true, dim=1)         real_labels.append(true)  predictions = torch.cat(predictions) real_labels = torch.cat(real_labels)                   (predictions == real_labels).sum().item()/len(predictions)                 <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 313/313 [00:01&lt;00:00, 191.92it/s]\n</pre> In\u00a0[45]: Copied! <pre>(predictions == real_labels).sum().item()/len(predictions)\n</pre> (predictions == real_labels).sum().item()/len(predictions)  Out[45]: <pre>0.9818</pre> <p>98% is not terrible, but importantly we have also learned a useful shared embedding space.</p> <p>What does the latent space of the image encoder look like?</p> In\u00a0[54]: Copied! <pre># send the test digits through the encoder and get latent representations\nlatent_representations = []\ntest_labels = []\nwith torch.no_grad():\n    for (imgs, targets, labels) in tqdm(test_loader):\n        latent_representations.append(clip.image_encoder(imgs))\n        labels = torch.argmax(labels, dim=1)\n        test_labels.append(labels)\n\n\nlatent_representations = np.array(torch.cat(latent_representations)).squeeze()\ntest_labels = torch.cat(test_labels).numpy()\n</pre> # send the test digits through the encoder and get latent representations latent_representations = [] test_labels = [] with torch.no_grad():     for (imgs, targets, labels) in tqdm(test_loader):         latent_representations.append(clip.image_encoder(imgs))         labels = torch.argmax(labels, dim=1)         test_labels.append(labels)   latent_representations = np.array(torch.cat(latent_representations)).squeeze() test_labels = torch.cat(test_labels).numpy() <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 313/313 [00:01&lt;00:00, 250.18it/s]\n</pre> In\u00a0[55]: Copied! <pre>scaled = StandardScaler().fit_transform(latent_representations)\npca = PCA(n_components=2)\npca_result = pca.fit_transform(scaled)\nplt.scatter(pca_result[:,0], pca_result[:,1], c=test_labels, cmap='tab10', alpha=0.5)\nplt.colorbar()\nplt.show()\n</pre> scaled = StandardScaler().fit_transform(latent_representations) pca = PCA(n_components=2) pca_result = pca.fit_transform(scaled) plt.scatter(pca_result[:,0], pca_result[:,1], c=test_labels, cmap='tab10', alpha=0.5) plt.colorbar() plt.show() In\u00a0[67]: Copied! <pre># get an example image from each class\nexample_images = []\nexample_labels = []\nwith torch.no_grad():\n    for (imgs, targets, labels) in tqdm(test_loader):\n        example_images.append(imgs[0])\n        labels = torch.argmax(labels, dim=1)\n        example_labels.append(labels[0].numpy())\n\nexample_images = torch.cat(example_images).numpy()\nexample_labels = np.array(example_labels)\n# get one digit image from each class\n\nimages = []\nfor i in range(10):\n    idx = np.where(example_labels == i)[0][0]\n    images.append(example_images[idx])\n</pre> # get an example image from each class example_images = [] example_labels = [] with torch.no_grad():     for (imgs, targets, labels) in tqdm(test_loader):         example_images.append(imgs[0])         labels = torch.argmax(labels, dim=1)         example_labels.append(labels[0].numpy())  example_images = torch.cat(example_images).numpy() example_labels = np.array(example_labels) # get one digit image from each class  images = [] for i in range(10):     idx = np.where(example_labels == i)[0][0]     images.append(example_images[idx]) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 313/313 [00:01&lt;00:00, 294.49it/s]\n</pre> In\u00a0[71]: Copied! <pre>images = np.array(images)\n\n# plot\nfig, ax = plt.subplots(1, 10, figsize=(10, 5))\nfor i in range(10):\n    ax[i].imshow(images[i].reshape(28, 28), cmap='gray')\n    ax[i].axis('off')\n    ax[i].set_title(f'Class {i}')\n\nplt.show()\n</pre> images = np.array(images)  # plot fig, ax = plt.subplots(1, 10, figsize=(10, 5)) for i in range(10):     ax[i].imshow(images[i].reshape(28, 28), cmap='gray')     ax[i].axis('off')     ax[i].set_title(f'Class {i}')  plt.show() In\u00a0[72]: Copied! <pre>one_hot_labels = np.zeros((10, 10))\none_hot_labels[np.arange(10), np.arange(10)] = 1\n</pre> one_hot_labels = np.zeros((10, 10)) one_hot_labels[np.arange(10), np.arange(10)] = 1 In\u00a0[75]: Copied! <pre>one_hot_labels.shape\n</pre> one_hot_labels.shape Out[75]: <pre>(10, 10)</pre> In\u00a0[76]: Copied! <pre># get the logits\nlogits = clip(torch.tensor(images).unsqueeze(1), torch.tensor(one_hot_labels).float())\n</pre> # get the logits logits = clip(torch.tensor(images).unsqueeze(1), torch.tensor(one_hot_labels).float()) In\u00a0[79]: Copied! <pre>import seaborn as sns\n\n# plot and force square\nplt.figure(figsize=(7,7))\n\nprobs = F.softmax(logits, dim=1)\nsns.heatmap(probs.detach().numpy(), cmap='viridis', cbar=False, annot=True, fmt='.2f')\nplt.xlabel('Prediction')\nplt.ylabel('True')\nplt.title('Predictions for each class')\nplt.show()\n</pre> import seaborn as sns  # plot and force square plt.figure(figsize=(7,7))  probs = F.softmax(logits, dim=1) sns.heatmap(probs.detach().numpy(), cmap='viridis', cbar=False, annot=True, fmt='.2f') plt.xlabel('Prediction') plt.ylabel('True') plt.title('Predictions for each class') plt.show()  <p>Not bad! The model struggled with this number 9, but looking at the image you can see that it does sort of look like a 3, so understandable.</p>"},{"location":"BuildingBlocks/2_CLIP/#clip","title":"CLIP\u00b6","text":"<p>In this notebook, we create a very basic contrastive learning model. It consists of 45 main components:</p> <ul> <li>A label encoder</li> <li>An image encoder</li> <li>A projection head</li> <li>The model</li> <li>A contrastive loss</li> </ul>"},{"location":"BuildingBlocks/2_CLIP/#digit-encoder","title":"Digit encoder\u00b6","text":"<p>This is a simple convolutional network that takes a 28x28 image and outputs a 64-dimensional vector.</p>"},{"location":"BuildingBlocks/2_CLIP/#label-encoder","title":"Label encoder\u00b6","text":"<p>This is a simple feedforward network that takes a one-hot encoded label and outputs a 64-dimensional vector.</p>"},{"location":"BuildingBlocks/2_CLIP/#projection-head","title":"Projection head\u00b6","text":"<p>Take the output of the encoders and project them to the final embedding space. We define this separately so that we can use whatever encoders we want.</p>"},{"location":"BuildingBlocks/2_CLIP/#the-final-model","title":"The final model\u00b6","text":""},{"location":"BuildingBlocks/2_CLIP/#contrastive-loss-function","title":"Contrastive loss function\u00b6","text":"<p>We define a special loss function</p>"},{"location":"BuildingBlocks/2_CLIP/#training","title":"Training\u00b6","text":""},{"location":"BuildingBlocks/2_CLIP/#evaluation","title":"Evaluation\u00b6","text":"<p>We evaluate the clip model by comparing the images again an array from 0 to 9. We expect the probabilities to be highest for the correct digit. For example if the image is of a 7, we expect the 7th entry to be the highest.</p>"},{"location":"BuildingBlocks/2_CLIP/#the-logits-for-some-examples","title":"The logits for some examples\u00b6","text":"<p>Here we get 10 examples from the training set and the corresponding labels. We then get the logits for these examples and plot them in a heatmap.</p>"},{"location":"BuildingBlocks/2_CLIP/#things-to-try","title":"Things to try:\u00b6","text":"<ol> <li>Make a better label and/or image encoder</li> <li>Make a bigger model!</li> </ol>"},{"location":"BuildingBlocks/3_UNet/","title":"U-Net","text":"In\u00a0[6]: Copied! <pre>import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm import tqdm\n\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torch.utils.data import DataLoader, Dataset from torchvision import datasets, transforms from tqdm import tqdm  import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>import sys\nsys.path.append('..')\nfrom diffusion_models import utils\n\nDATA_PATH = '../data/'\ntrain_loader, test_loader = utils.get_mnist(32, DATA_PATH)\n</pre> import sys sys.path.append('..') from diffusion_models import utils  DATA_PATH = '../data/' train_loader, test_loader = utils.get_mnist(32, DATA_PATH) In\u00a0[3]: Copied! <pre>class DownBlock(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n\n        self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n        self.pool1 = nn.MaxPool2d(kernel_size=2)\n\n    \n    def forward(self, x):\n        x1 = F.relu(self.bn1(self.conv1(x)))\n        x2 = self.pool1(x1)\n        return x1, x2\n    \n\nclass UpBlock(nn.Module):\n    def __init__(self, in_channels, residual_channels, out_channels):\n        super().__init__()\n\n        self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n        self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n\n\n    def forward(self, x1, residual):\n        x3 = self.upconv1(x1)\n        x3 = torch.cat([x3, residual], dim=1)\n        x4 = F.relu(self.bn1(self.conv1(x3)))\n        return x4\n            \n\nclass UNetSmol(nn.Module):\n    def __init__(self, input_channels=1, output_channels=1):\n        super().__init__()\n\n        # Encoder\n        self.down1 = DownBlock(in_channels=input_channels, out_channels=4)\n        self.down2 = DownBlock(in_channels=4, out_channels=8)\n\n        # Bottleneck\n        self.conv3 = nn.Conv2d(8, 16, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm2d(num_features=16)\n\n        # Decoder\n        self.up1 = UpBlock(in_channels=16, residual_channels=8, out_channels=8)\n        self.up2 = UpBlock(in_channels=8, residual_channels=4, out_channels=4)\n        self.conv6 = nn.Conv2d(4, output_channels, kernel_size=1)\n\n\n    def forward(self, x, labels=None):\n        x1, x2 = self.down1(x)\n        x3, x4 = self.down2(x2)\n\n        x5 = F.relu(self.bn3(self.conv3(x4)))\n\n        x6 = self.up1(x5, x3)\n        x7 = self.up2(x6, x1)\n\n        x8 = self.conv6(x7)\n        return x8\n</pre> class DownBlock(nn.Module):     def __init__(self, in_channels, out_channels):         super().__init__()          self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)         self.pool1 = nn.MaxPool2d(kernel_size=2)           def forward(self, x):         x1 = F.relu(self.bn1(self.conv1(x)))         x2 = self.pool1(x1)         return x1, x2       class UpBlock(nn.Module):     def __init__(self, in_channels, residual_channels, out_channels):         super().__init__()          self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)         self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)       def forward(self, x1, residual):         x3 = self.upconv1(x1)         x3 = torch.cat([x3, residual], dim=1)         x4 = F.relu(self.bn1(self.conv1(x3)))         return x4               class UNetSmol(nn.Module):     def __init__(self, input_channels=1, output_channels=1):         super().__init__()          # Encoder         self.down1 = DownBlock(in_channels=input_channels, out_channels=4)         self.down2 = DownBlock(in_channels=4, out_channels=8)          # Bottleneck         self.conv3 = nn.Conv2d(8, 16, kernel_size=3, padding=1)         self.bn3 = nn.BatchNorm2d(num_features=16)          # Decoder         self.up1 = UpBlock(in_channels=16, residual_channels=8, out_channels=8)         self.up2 = UpBlock(in_channels=8, residual_channels=4, out_channels=4)         self.conv6 = nn.Conv2d(4, output_channels, kernel_size=1)       def forward(self, x, labels=None):         x1, x2 = self.down1(x)         x3, x4 = self.down2(x2)          x5 = F.relu(self.bn3(self.conv3(x4)))          x6 = self.up1(x5, x3)         x7 = self.up2(x6, x1)          x8 = self.conv6(x7)         return x8 In\u00a0[4]: Copied! <pre>model = UNetSmol()\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n</pre> model = UNetSmol() criterion = nn.MSELoss() optimizer = optim.Adam(model.parameters(), lr=0.001)  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') In\u00a0[5]: Copied! <pre>num_epochs = 5\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n\n    for img, clean_imgs, _ in tqdm(train_loader):\n        # add some noise to the image\n        noise_factor = np.random.rand() * 0.5\n        noisy_imgs = utils.add_noise(img, noise_factor)\n        noisy_imgs, clean_imgs = noisy_imgs.to(device), clean_imgs.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(noisy_imgs)\n        loss = criterion(outputs, clean_imgs)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')\n\n    # Validate the model\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for img, clean_imgs, _ in test_loader:\n            noise_factor = np.random.rand() * 0.5\n            noisy_imgs = utils.add_noise(img, noise_factor)\n            noisy_imgs, clean_imgs = noisy_imgs.to(device), clean_imgs.to(device)\n            outputs = model(noisy_imgs)\n            loss = criterion(outputs, clean_imgs)\n            val_loss += loss.item()\n    \n    print(f'Validation Loss: {val_loss/len(test_loader):.4f}')\n</pre> num_epochs = 5  for epoch in range(num_epochs):     model.train()     running_loss = 0.0      for img, clean_imgs, _ in tqdm(train_loader):         # add some noise to the image         noise_factor = np.random.rand() * 0.5         noisy_imgs = utils.add_noise(img, noise_factor)         noisy_imgs, clean_imgs = noisy_imgs.to(device), clean_imgs.to(device)          optimizer.zero_grad()         outputs = model(noisy_imgs)         loss = criterion(outputs, clean_imgs)         loss.backward()         optimizer.step()          running_loss += loss.item()      print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')      # Validate the model     model.eval()     val_loss = 0.0     with torch.no_grad():         for img, clean_imgs, _ in test_loader:             noise_factor = np.random.rand() * 0.5             noisy_imgs = utils.add_noise(img, noise_factor)             noisy_imgs, clean_imgs = noisy_imgs.to(device), clean_imgs.to(device)             outputs = model(noisy_imgs)             loss = criterion(outputs, clean_imgs)             val_loss += loss.item()          print(f'Validation Loss: {val_loss/len(test_loader):.4f}')  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:58&lt;00:00, 31.96it/s]\n</pre> <pre>Epoch [1/5], Loss: 0.1126\nValidation Loss: 0.0245\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [00:58&lt;00:00, 32.22it/s]\n</pre> <pre>Epoch [2/5], Loss: 0.0184\nValidation Loss: 0.0218\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [01:06&lt;00:00, 28.20it/s]\n</pre> <pre>Epoch [3/5], Loss: 0.0172\nValidation Loss: 0.0215\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [01:10&lt;00:00, 26.45it/s]\n</pre> <pre>Epoch [4/5], Loss: 0.0161\nValidation Loss: 0.0194\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [01:02&lt;00:00, 29.78it/s]\n</pre> <pre>Epoch [5/5], Loss: 0.0163\nValidation Loss: 0.0215\n</pre> <p>The loss so far looks OK. And if you flip back to the original Autoencoder, the loss is quite a bit lower for the U-Net.</p> In\u00a0[25]: Copied! <pre>image, target, label = next(iter(test_loader))\nnoisy_imgs = utils.add_noise(image, 0.5)\nout = model(image).detach().numpy()\n\n# plot 10 images and the results\nfig, ax = plt.subplots(3, 10, figsize=(18, 6))\nfor i in range(10):\n    ax[0, i].imshow(image[i].squeeze(), cmap='gray')\n    ax[1, i].imshow(noisy_imgs[i].squeeze(), cmap='gray')\n    ax[2, i].imshow(out[i].squeeze(), cmap='gray')\n    # no axis\n    for a in ax.ravel():\n        a.axis('off')\n\nplt.tight_layout()\nplt.show()\n</pre> image, target, label = next(iter(test_loader)) noisy_imgs = utils.add_noise(image, 0.5) out = model(image).detach().numpy()  # plot 10 images and the results fig, ax = plt.subplots(3, 10, figsize=(18, 6)) for i in range(10):     ax[0, i].imshow(image[i].squeeze(), cmap='gray')     ax[1, i].imshow(noisy_imgs[i].squeeze(), cmap='gray')     ax[2, i].imshow(out[i].squeeze(), cmap='gray')     # no axis     for a in ax.ravel():         a.axis('off')  plt.tight_layout() plt.show() <p>What happens if I just stuff pure noise into this model...?</p> In\u00a0[28]: Copied! <pre>pure_noise = torch.randn(10, 1, 28, 28)\nout = model(pure_noise).detach().numpy()\n\nfig, ax = plt.subplots(1, 10, figsize=(18, 3))\nfor i in range(10):\n    ax[i].imshow(out[i].squeeze(), cmap='gray')\n    ax[i].axis('off')\n\nplt.tight_layout()\nplt.show()\n</pre> pure_noise = torch.randn(10, 1, 28, 28) out = model(pure_noise).detach().numpy()  fig, ax = plt.subplots(1, 10, figsize=(18, 3)) for i in range(10):     ax[i].imshow(out[i].squeeze(), cmap='gray')     ax[i].axis('off')  plt.tight_layout() plt.show() <p>OK, well that's total nonsense. Let's try something else...</p> In\u00a0[29]: Copied! <pre>class LabelEncoder(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.encoder = nn.Sequential(\n            nn.Linear(10, 16),\n            nn.ReLU(),\n            nn.Linear(16, 32)\n        )\n\n    def forward(self, x):\n        return self.encoder(x)\n</pre> class LabelEncoder(nn.Module):     def __init__(self):         super().__init__()         self.encoder = nn.Sequential(             nn.Linear(10, 16),             nn.ReLU(),             nn.Linear(16, 32)         )      def forward(self, x):         return self.encoder(x) <p>Annoyingly, we need to modify our U-Net to accept the additional features.</p> In\u00a0[44]: Copied! <pre>class DownBlock(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n\n        self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n        self.pool1 = nn.MaxPool2d(kernel_size=2)\n\n\n    def forward(self, x):\n        x1 = F.relu(self.bn1(self.conv1(x)))\n        x2 = self.pool1(x1)\n        return x1, x2\n    \n\nclass UpBlock(nn.Module):\n    def __init__(self, in_channels, residual_channels, out_channels):\n        super().__init__()\n\n        self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n        self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n\n\n    def forward(self, x1, residual):\n        x3 = self.upconv1(x1)\n        x3 = torch.cat([x3, residual], dim=1)\n        x4 = F.relu(self.bn1(self.conv1(x3)))\n        return x4\n            \n\nclass UNetSmol(nn.Module):\n    def __init__(self, input_channels=1, output_channels=1):\n        super().__init__()\n\n        # Encoder\n        self.down1 = DownBlock(in_channels=input_channels, out_channels=4)\n        self.down2 = DownBlock(in_channels=4, out_channels=8)\n\n        # Bottleneck\n        self.conv3 = nn.Conv2d(8, 32, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm2d(32)\n\n        # Decoder\n        # We have to make sure that the input channels match up\n        # 32 from the bottleneck + 32 from the labels\n        self.up1 = UpBlock(in_channels=64, residual_channels=8, out_channels=8)\n        # 8 from the previous layer + 32 from the labels\n        self.up2 = UpBlock(in_channels=40, residual_channels=4, out_channels=4)\n        self.conv6 = nn.Conv2d(4, output_channels, kernel_size=1)\n\n        self.label_encoder = LabelEncoder()\n\n\n    def forward(self, x, labels=None):\n        x1, x2 = self.down1(x)\n        x3, x4 = self.down2(x2)\n\n        x5 = F.relu(self.bn3(self.conv3(x4)))\n\n        labels = self.label_encoder(labels)\n        # tile labels to shape  (batch_size, 32, 7, 7)\n        labels_1 = labels.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 14, 14)\n        x3 = torch.cat([x3, labels_1], dim=1)\n\n        x6 = self.up1(x5, x3)\n\n        labels_2 = labels.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 28, 28)\n        x1 = torch.cat([x1, labels_2], dim=1)\n\n        x7 = self.up2(x6, x1)\n\n        x8 = self.conv6(x7)\n        return x8\n</pre> class DownBlock(nn.Module):     def __init__(self, in_channels, out_channels):         super().__init__()          self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)         self.pool1 = nn.MaxPool2d(kernel_size=2)       def forward(self, x):         x1 = F.relu(self.bn1(self.conv1(x)))         x2 = self.pool1(x1)         return x1, x2       class UpBlock(nn.Module):     def __init__(self, in_channels, residual_channels, out_channels):         super().__init__()          self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)         self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)       def forward(self, x1, residual):         x3 = self.upconv1(x1)         x3 = torch.cat([x3, residual], dim=1)         x4 = F.relu(self.bn1(self.conv1(x3)))         return x4               class UNetSmol(nn.Module):     def __init__(self, input_channels=1, output_channels=1):         super().__init__()          # Encoder         self.down1 = DownBlock(in_channels=input_channels, out_channels=4)         self.down2 = DownBlock(in_channels=4, out_channels=8)          # Bottleneck         self.conv3 = nn.Conv2d(8, 32, kernel_size=3, padding=1)         self.bn3 = nn.BatchNorm2d(32)          # Decoder         # We have to make sure that the input channels match up         # 32 from the bottleneck + 32 from the labels         self.up1 = UpBlock(in_channels=64, residual_channels=8, out_channels=8)         # 8 from the previous layer + 32 from the labels         self.up2 = UpBlock(in_channels=40, residual_channels=4, out_channels=4)         self.conv6 = nn.Conv2d(4, output_channels, kernel_size=1)          self.label_encoder = LabelEncoder()       def forward(self, x, labels=None):         x1, x2 = self.down1(x)         x3, x4 = self.down2(x2)          x5 = F.relu(self.bn3(self.conv3(x4)))          labels = self.label_encoder(labels)         # tile labels to shape  (batch_size, 32, 7, 7)         labels_1 = labels.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 14, 14)         x3 = torch.cat([x3, labels_1], dim=1)          x6 = self.up1(x5, x3)          labels_2 = labels.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 28, 28)         x1 = torch.cat([x1, labels_2], dim=1)          x7 = self.up2(x6, x1)          x8 = self.conv6(x7)         return x8 In\u00a0[45]: Copied! <pre>model = UNetSmol()\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n</pre> model = UNetSmol() criterion = nn.MSELoss() optimizer = optim.Adam(model.parameters(), lr=0.001)  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') <p>The only thing that changes is that we now feed in the labels as input</p> In\u00a0[50]: Copied! <pre>num_epochs = 5\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n\n    for image, target, labels in tqdm(train_loader):\n        noise_factor = np.random.rand()\n        noisy_imgs = utils.add_noise(image, noise_factor)\n        noisy_imgs, target = noisy_imgs.to(device), target.to(device)\n        optimizer.zero_grad()\n        outputs = model(noisy_imgs, labels)\n        loss = criterion(outputs, target)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')\n\n    # Validate the model\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for image, target, labels in test_loader:\n            noise_factor = np.random.rand()\n            noisy_imgs = utils.add_noise(image, noise_factor)\n            noisy_imgs, target = noisy_imgs.to(device), target.to(device)\n            outputs = model(noisy_imgs, labels)\n            loss = criterion(outputs, target)\n            val_loss += loss.item()\n    \n    print(f'Validation Loss: {val_loss/len(test_loader):.4f}')\n</pre> num_epochs = 5  for epoch in range(num_epochs):     model.train()     running_loss = 0.0      for image, target, labels in tqdm(train_loader):         noise_factor = np.random.rand()         noisy_imgs = utils.add_noise(image, noise_factor)         noisy_imgs, target = noisy_imgs.to(device), target.to(device)         optimizer.zero_grad()         outputs = model(noisy_imgs, labels)         loss = criterion(outputs, target)         loss.backward()         optimizer.step()          running_loss += loss.item()      print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')      # Validate the model     model.eval()     val_loss = 0.0     with torch.no_grad():         for image, target, labels in test_loader:             noise_factor = np.random.rand()             noisy_imgs = utils.add_noise(image, noise_factor)             noisy_imgs, target = noisy_imgs.to(device), target.to(device)             outputs = model(noisy_imgs, labels)             loss = criterion(outputs, target)             val_loss += loss.item()          print(f'Validation Loss: {val_loss/len(test_loader):.4f}')  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:40&lt;00:00,  8.52it/s]\n</pre> <pre>Epoch [1/5], Loss: 0.0988\nValidation Loss: 0.1523\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:46&lt;00:00,  8.28it/s]\n</pre> <pre>Epoch [2/5], Loss: 0.0972\nValidation Loss: 0.1576\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:43&lt;00:00,  8.41it/s]\n</pre> <pre>Epoch [3/5], Loss: 0.0976\nValidation Loss: 0.1722\n</pre> <pre> 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1574/1875 [03:00&lt;00:34,  8.73it/s]\n</pre> <pre>\n---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\nCell In[50], line 14\n     12 outputs = model(noisy_imgs, labels)\n     13 loss = criterion(outputs, target)\n---&gt; 14 loss.backward()\n     15 optimizer.step()\n     17 running_loss += loss.item()\n\nFile /usr/local/lib/python3.10/dist-packages/torch/_tensor.py:525, in Tensor.backward(self, gradient, retain_graph, create_graph, inputs)\n    515 if has_torch_function_unary(self):\n    516     return handle_torch_function(\n    517         Tensor.backward,\n    518         (self,),\n   (...)\n    523         inputs=inputs,\n    524     )\n--&gt; 525 torch.autograd.backward(\n    526     self, gradient, retain_graph, create_graph, inputs=inputs\n    527 )\n\nFile /usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py:267, in backward(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\n    262     retain_graph = create_graph\n    264 # The reason we repeat the same comment below is that\n    265 # some Python versions print out the first line of a multi-line function\n    266 # calls in the traceback and some print out the last line\n--&gt; 267 _engine_run_backward(\n    268     tensors,\n    269     grad_tensors_,\n    270     retain_graph,\n    271     create_graph,\n    272     inputs,\n    273     allow_unreachable=True,\n    274     accumulate_grad=True,\n    275 )\n\nFile /usr/local/lib/python3.10/dist-packages/torch/autograd/graph.py:744, in _engine_run_backward(t_outputs, *args, **kwargs)\n    742     unregister_hooks = _register_logging_hooks_on_whole_graph(t_outputs)\n    743 try:\n--&gt; 744     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n    745         t_outputs, *args, **kwargs\n    746     )  # Calls into the C++ engine to run the backward pass\n    747 finally:\n    748     if attach_logging_hooks:\n\nKeyboardInterrupt: </pre> <p>We do the same as before to assess the denoising capabilities.</p> In\u00a0[51]: Copied! <pre>image, target, label = next(iter(test_loader))\nnoisy_imgs = utils.add_noise(image, 0.5)\nout = model(image, label).detach().numpy()\n\n# plot 10 images and the results\nfig, ax = plt.subplots(3, 10, figsize=(18, 6))\nfor i in range(10):\n    ax[0, i].imshow(image[i].squeeze(), cmap='gray')\n    ax[1, i].imshow(noisy_imgs[i].squeeze(), cmap='gray')\n    ax[2, i].imshow(out[i].squeeze(), cmap='gray')\n    # no axis\n    for a in ax.ravel():\n        a.axis('off')\n\nplt.tight_layout()\nplt.show()\n</pre> image, target, label = next(iter(test_loader)) noisy_imgs = utils.add_noise(image, 0.5) out = model(image, label).detach().numpy()  # plot 10 images and the results fig, ax = plt.subplots(3, 10, figsize=(18, 6)) for i in range(10):     ax[0, i].imshow(image[i].squeeze(), cmap='gray')     ax[1, i].imshow(noisy_imgs[i].squeeze(), cmap='gray')     ax[2, i].imshow(out[i].squeeze(), cmap='gray')     # no axis     for a in ax.ravel():         a.axis('off')  plt.tight_layout() plt.show() <p>OK great, that worked fine as before. Now let's try and add some noise into the model *and* some labels to predict and see how it does...</p> In\u00a0[52]: Copied! <pre>pure_noise = torch.randn(10, 1, 28, 28)*0.5\nlabels = torch.arange(10)\none_hot_labels = F.one_hot(labels, num_classes=10).float()\n\nout = model(pure_noise, one_hot_labels).detach().numpy()\n\nfig, ax = plt.subplots(1, 10, figsize=(18, 3))\nfor i in range(10):\n    ax[i].imshow(out[i].squeeze(), cmap='gray')\n    ax[i].axis('off')\n    ax[i].set_title(str(labels[i].item()))\n\nplt.tight_layout()\nplt.show()\n</pre> pure_noise = torch.randn(10, 1, 28, 28)*0.5 labels = torch.arange(10) one_hot_labels = F.one_hot(labels, num_classes=10).float()  out = model(pure_noise, one_hot_labels).detach().numpy()  fig, ax = plt.subplots(1, 10, figsize=(18, 3)) for i in range(10):     ax[i].imshow(out[i].squeeze(), cmap='gray')     ax[i].axis('off')     ax[i].set_title(str(labels[i].item()))  plt.tight_layout() plt.show() <p>I mean...it's not great, but it's better than using the pure U-Net. We are actually asking an awful lot from this model - we are asking it to generate images from noise in essentially a single step! That's a big ask. We should probably try and denoise an image iteratively...</p>"},{"location":"BuildingBlocks/3_UNet/#u-net","title":"U-Net\u00b6","text":"<p>In this notebook, we build a very basic U-Net.</p>"},{"location":"BuildingBlocks/3_UNet/#down-blocks-and-up-blocks","title":"Down blocks and up blocks\u00b6","text":"<p>The U-Net architecture is composed of a contracting path (left side) and an expansive path (right side). The contracting path follows the typical architecture of a convolutional network, with a series of convolutional and pooling layers. The expansive path combines the feature maps from the contracting path with the corresponding feature maps in the expansive path. This is done by concatenating the feature maps from the contracting path with the feature maps in the expansive path. The expansive path is composed of a series of up-sampling and convolutional layers.</p> <p>Since we have some skip connections, we have to return the feature maps from the contracting path before pooling.</p>"},{"location":"BuildingBlocks/3_UNet/#train-the-model","title":"Train the model\u00b6","text":"<p>We use MSE loss again. We do not impose any constraints on the latent space.</p>"},{"location":"BuildingBlocks/3_UNet/#add-labels-as-features","title":"Add labels as features\u00b6","text":"<p>We make a very simple label encoder that takes the labels and adds them as features to the input. We then train the U-Net on this data.</p>"},{"location":"BuildingBlocks/3_UNet/#things-to-try","title":"Things to try\u00b6","text":"<ol> <li>In this notebook, added different amounts of noise during training. What if you only train on a large amount of noise?</li> <li>Try changing the size of the network - add more layers, or more filters per layer. If you have access to one, try using a GPU.</li> </ol>"},{"location":"BuildingBlocks/segmentation/","title":"Segmentation","text":"In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n</pre> import matplotlib.pyplot as plt import numpy as np from sklearn.cluster import KMeans <p>In the <code>img_seg</code> folder are 4 pictures:</p> <ul> <li>an apple</li> <li>a flower</li> <li>a house</li> <li>a chimpanzee</li> </ul> In\u00a0[4]: Copied! <pre># load all 4 images and plot in a 2x2 grid\nimages = ['apple', 'flower', 'house', 'monke']\nfig, axs = plt.subplots(2, 2)\nfor i in range(4):\n    img = plt.imread(f\"img_seg/{images[i]}.jpg\")\n    axs[i//2, i%2].imshow(img)\n    axs[i//2, i%2].axis(\"off\")\n\nplt.show()\n</pre> # load all 4 images and plot in a 2x2 grid images = ['apple', 'flower', 'house', 'monke'] fig, axs = plt.subplots(2, 2) for i in range(4):     img = plt.imread(f\"img_seg/{images[i]}.jpg\")     axs[i//2, i%2].imshow(img)     axs[i//2, i%2].axis(\"off\")  plt.show() <p>The apple looks to be the most basic, and we can visually identify two or three colors. We will use the apple.</p> In\u00a0[5]: Copied! <pre>img = plt.imread('img_seg/apple.jpg')\nimg.shape\n</pre> img = plt.imread('img_seg/apple.jpg') img.shape Out[5]: <pre>(501, 752, 3)</pre> In\u00a0[6]: Copied! <pre>plt.imshow(img)\nplt.axis('off')\nplt.show()\n</pre> plt.imshow(img) plt.axis('off') plt.show()  <p>We can actually use k-means clustering to find \"clusters\" of pixels based on their RGB values! We have to define the number of clusters that we want to extract from the image though.</p> In\u00a0[7]: Copied! <pre>def segment_image(img, n_clusters=2):\n    pixels = img.reshape((-1, 3))\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(pixels)\n    \n    centers = np.array(kmeans.cluster_centers_, dtype='uint')\n    labels = kmeans.labels_\n\n    new_img = np.zeros(pixels.shape, dtype='uint')\n    label_array = np.zeros(pixels.shape, dtype='uint')\n\n    for i in range(new_img.shape[0]):\n        new_img[i] = centers[labels[i]]\n        label_array[i] = labels[i]\n\n    \n    new_img = new_img.reshape(img.shape)\n    labels = label_array.reshape(img.shape)\n    labels = labels[:,:,0]\n\n    return new_img, labels, centers\n</pre> def segment_image(img, n_clusters=2):     pixels = img.reshape((-1, 3))     kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(pixels)          centers = np.array(kmeans.cluster_centers_, dtype='uint')     labels = kmeans.labels_      new_img = np.zeros(pixels.shape, dtype='uint')     label_array = np.zeros(pixels.shape, dtype='uint')      for i in range(new_img.shape[0]):         new_img[i] = centers[labels[i]]         label_array[i] = labels[i]           new_img = new_img.reshape(img.shape)     labels = label_array.reshape(img.shape)     labels = labels[:,:,0]      return new_img, labels, centers <p>Try with 2 colors first.</p> In\u00a0[10]: Copied! <pre>new_img, labels, centers = segment_image(img, n_clusters=2)\n</pre> new_img, labels, centers = segment_image(img, n_clusters=2) In\u00a0[11]: Copied! <pre>plt.imshow([centers])\nplt.axis('off')\nplt.title('Dominant colors')\nplt.show()\n</pre> plt.imshow([centers]) plt.axis('off') plt.title('Dominant colors') plt.show() <p>So the model has pulled out two very clear colors: a sort of grey/beige for the background, and the red for the apple. We can now plot the segmented image and show the label mask.</p> In\u00a0[13]: Copied! <pre>fig, ax = plt.subplots(1, 2, figsize=(12, 6))\nax[0].imshow(new_img)\nax[0].axis('off')\nax[0].set_title('Segmented image')\n\nax[1].imshow(labels, cmap='gray')\nax[1].axis('off')\nax[1].set_title('Labels')\nplt.show()\n</pre> fig, ax = plt.subplots(1, 2, figsize=(12, 6)) ax[0].imshow(new_img) ax[0].axis('off') ax[0].set_title('Segmented image')  ax[1].imshow(labels, cmap='gray') ax[1].axis('off') ax[1].set_title('Labels') plt.show() In\u00a0[142]: Copied! <pre># plot original image \"underneath\" the segmented image\nalphas = np.linspace(0, 1, 20)\n\nfig, axs = plt.subplots(4, 5, figsize=(12, 6))\nfor i, alpha in enumerate(alphas):\n    axs[i//5, i%5].imshow(img)\n    axs[i//5, i%5].imshow(new_img, alpha=alpha)\n    axs[i//5, i%5].axis('off')\nplt.show()\n</pre> # plot original image \"underneath\" the segmented image alphas = np.linspace(0, 1, 20)  fig, axs = plt.subplots(4, 5, figsize=(12, 6)) for i, alpha in enumerate(alphas):     axs[i//5, i%5].imshow(img)     axs[i//5, i%5].imshow(new_img, alpha=alpha)     axs[i//5, i%5].axis('off') plt.show() <p>Now what if we try with a more complicated image: the chimp.</p> In\u00a0[14]: Copied! <pre>img = plt.imread('img_seg/monke.jpg')\nplt.imshow(img)\nplt.axis('off')\nplt.show()\n</pre> img = plt.imread('img_seg/monke.jpg') plt.imshow(img) plt.axis('off') plt.show() <p>It is hard to know exactly how many colors appear here. There is the dark color of the fur; the green in the upper background; the brown of the lower background; the red of the apple or pepper; the orange of the carrot; and the lighter colors on the face and hands.</p> <p>So let's try 6 for now.</p> In\u00a0[32]: Copied! <pre>new_img, labels, centers = segment_image(img, n_clusters=6)\nplt.imshow([centers])\nplt.axis('off')\nplt.title('Dominant colors')\nplt.show()\n</pre> new_img, labels, centers = segment_image(img, n_clusters=6) plt.imshow([centers]) plt.axis('off') plt.title('Dominant colors') plt.show() In\u00a0[33]: Copied! <pre>fig, ax = plt.subplots(1, 2, figsize=(12, 6))\nax[0].imshow(new_img)\nax[0].axis('off')\nax[0].set_title('Segmented image')\n\nax[1].imshow(labels, cmap='gray')\nax[1].axis('off')\nax[1].set_title('Labels')\nplt.show()\n</pre> fig, ax = plt.subplots(1, 2, figsize=(12, 6)) ax[0].imshow(new_img) ax[0].axis('off') ax[0].set_title('Segmented image')  ax[1].imshow(labels, cmap='gray') ax[1].axis('off') ax[1].set_title('Labels') plt.show() <p>This example is not quite as straight forward as extracting an apple. Notice that if you increase the number of clusters, the segmented image will just begin to approach the original one.</p>"},{"location":"BuildingBlocks/segmentation/#segmentation","title":"Segmentation\u00b6","text":"<p>In this notebook, we perform very simple segmentation using a basic model and an easy image.</p>"},{"location":"DDPM/","title":"Denoising Diffusion Probabilistic Models","text":""},{"location":"DDPM/#denoising-diffusion-probabilistic-models","title":"Denoising Diffusion Probabilistic Models","text":""},{"location":"DDPM/4_diffusion/","title":"Diffusion","text":"In\u00a0[35]: Copied! <pre>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport math\n\nfrom tqdm import tqdm\n</pre> import torch import torch.nn as nn import torch.optim as optim import torch.nn.functional as F from torch.utils.data import DataLoader, Dataset from torchvision import datasets, transforms import numpy as np  import matplotlib.pyplot as plt  import math  from tqdm import tqdm In\u00a0[5]: Copied! <pre>import sys\nsys.path.append('..')\nfrom diffusion_models import utils\n\nDATA_PATH = '../data/'\ntrain_loader, test_loader = utils.get_mnist(32, DATA_PATH)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</pre> import sys sys.path.append('..') from diffusion_models import utils  DATA_PATH = '../data/' train_loader, test_loader = utils.get_mnist(32, DATA_PATH)  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\") In\u00a0[6]: Copied! <pre>T = 150 # number of time steps\nstart = 0.0001 # starting variance\nend = 0.03 # final variance\n\nbeta = torch.linspace(start, end, T).to(device)\n</pre> T = 150 # number of time steps start = 0.0001 # starting variance end = 0.03 # final variance  beta = torch.linspace(start, end, T).to(device) In\u00a0[7]: Copied! <pre>sample_image, target, label = next(iter(train_loader))\nsample_image = sample_image[0]\n</pre> sample_image, target, label = next(iter(train_loader)) sample_image = sample_image[0] <p>To generate noise at a specific variance, we can use the following formula:</p> <p>$$ x_t = \\sqrt{1 - \\beta_t}x_{t-1} + \\sqrt{\\beta_t}\\epsilon_t $$</p> <p>But of course we have to do this iteratively. The plot below looks at a sample image at different levels of noise.</p> In\u00a0[16]: Copied! <pre>plt.figure(figsize=(10,6))\nx_0 = sample_image[0]\nx_t = x_0\n\nfor t in range(T):\n    noise = torch.randn_like(x_t)\n    x_t = torch.sqrt(1 - beta[t]) * x_t + torch.sqrt(beta[t]) * noise\n    img = torch.squeeze(x_t).numpy()\n    plt.subplot(10, 15, t+1)\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\nplt.show()\n    \n</pre> plt.figure(figsize=(10,6)) x_0 = sample_image[0] x_t = x_0  for t in range(T):     noise = torch.randn_like(x_t)     x_t = torch.sqrt(1 - beta[t]) * x_t + torch.sqrt(beta[t]) * noise     img = torch.squeeze(x_t).numpy()     plt.subplot(10, 15, t+1)     plt.imshow(img, cmap='gray')     plt.axis('off') plt.show()      <p>Now we define a new variable $ \\alpha $ the cumulative product, $\\bar{\\alpha}$, and to make things easier, we also need to define $\\sqrt{\\bar{\\alpha}}$ and $\\sqrt{1-\\bar{\\alpha}}$</p> In\u00a0[17]: Copied! <pre>alpha = 1. - beta\nalpha_bar = torch.cumprod(alpha, dim=0)\nsqrt_alpha_bar = torch.sqrt(alpha_bar)\nsqrt_one_minus_alpha_bar = torch.sqrt(1 - alpha_bar)\n</pre> alpha = 1. - beta alpha_bar = torch.cumprod(alpha, dim=0) sqrt_alpha_bar = torch.sqrt(alpha_bar) sqrt_one_minus_alpha_bar = torch.sqrt(1 - alpha_bar) In\u00a0[37]: Copied! <pre>def q(x_0, t):\n    t = t.int()\n    noise = torch.randn_like(x_0)\n    sqrt_a_bar_t = sqrt_alpha_bar[t, None, None, None]\n    sqrt_one_minus_a_bar_t = sqrt_one_minus_alpha_bar[t, None, None, None]\n\n    x_t = sqrt_a_bar_t * x_0 + sqrt_one_minus_a_bar_t * noise\n    return x_t, noise\n</pre> def q(x_0, t):     t = t.int()     noise = torch.randn_like(x_0)     sqrt_a_bar_t = sqrt_alpha_bar[t, None, None, None]     sqrt_one_minus_a_bar_t = sqrt_one_minus_alpha_bar[t, None, None, None]      x_t = sqrt_a_bar_t * x_0 + sqrt_one_minus_a_bar_t * noise     return x_t, noise In\u00a0[20]: Copied! <pre>plt.figure(figsize=(10,6))\nx_0 = sample_image[0]\n\nfor t in range(T):\n    x_t = q(x_0, torch.tensor(t))[0]\n    img = torch.squeeze(x_t).numpy()\n    plt.subplot(10, 15, t+1)\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\nplt.show()\n</pre> plt.figure(figsize=(10,6)) x_0 = sample_image[0]  for t in range(T):     x_t = q(x_0, torch.tensor(t))[0]     img = torch.squeeze(x_t).numpy()     plt.subplot(10, 15, t+1)     plt.imshow(img, cmap='gray')     plt.axis('off') plt.show() <p>Great so it's basically the same as before.</p> In\u00a0[38]: Copied! <pre>def loss_function(model, x_0, t, label):\n    x_noisy, noise = q(x_0, t)\n    noise_pred = model(x_noisy, t, label)\n    return F.mse_loss(noise, noise_pred)\n</pre> def loss_function(model, x_0, t, label):     x_noisy, noise = q(x_0, t)     noise_pred = model(x_noisy, t, label)     return F.mse_loss(noise, noise_pred) <p>We also add a way for the model to take in the time, and the context, in the same way as before. Only this time, we also include an additional sinusoidal encoding of the time as well. So we have a positional embedding, and a learned embedding.</p> In\u00a0[45]: Copied! <pre>class SinusoidBlock(nn.Module):\n    def __init__(self, embedding_dim):\n        super().__init__()\n        self.embedding_dim = embedding_dim\n\n    def forward(self, time):\n        device = time.device\n        half = self.embedding_dim // 2\n        embeddings = math.log(10000) / (half - 1)\n        embeddings = torch.exp(torch.arange(half, device=device) * -embeddings)\n        embeddings = time[:, None] * embeddings[None, :]\n        embeddings = torch.cat((embeddings.sin(), embeddings.cos()), dim=-1)\n        return embeddings\n\n\nclass TimeBlock(nn.Module):\n    def __init__(self, in_features, out_features):\n        super().__init__()\n        self.in_features = in_features\n        layers = [\n            nn.Linear(in_features=in_features, out_features=out_features),\n            nn.ReLU(),\n            nn.Linear(in_features=out_features, out_features=out_features),\n            nn.Unflatten(dim=1, unflattened_size=(out_features, 1, 1)),\n\n        ]\n        self.model = nn.Sequential(*layers)\n\n    def forward(self, input):\n        input = input.view(-1, self.in_features)\n        return self.model(input)\n\n\nclass ContextBlock(nn.Module):\n    def __init__(self, in_features, out_features):\n        super().__init__()\n        self.in_features = in_features\n        layers = [\n            nn.Linear(in_features=in_features, out_features=out_features),\n            nn.ReLU(),\n            nn.Linear(in_features=out_features, out_features=out_features),\n            nn.Unflatten(dim=1, unflattened_size=(out_features, 1, 1))\n        ]\n        self.model = nn.Sequential(*layers)\n\n    def forward(self, input):\n        input = input.view(-1, self.in_features)\n        return self.model(input)\n\n\nclass DownBlock(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n\n        self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n        self.pool1 = nn.MaxPool2d(kernel_size=2)\n\n    def forward(self, x):\n        x1 = F.relu(self.bn1(self.conv1(x)))\n        x2 = self.pool1(x1)\n        return x1, x2\n    \n\nclass UpBlock(nn.Module):\n    def __init__(self, in_channels, residual_channels, out_channels):\n        super().__init__()\n\n        self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n        self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n        # self.conv2 = nn.Conv2d(in_channels=8, out_channels=out_channels//2, kernel_size=3, padding=1)\n\n\n    def forward(self, x1, residual):\n        x3 = self.upconv1(x1)\n        x3 = torch.cat([x3, residual], dim=1)\n        x4 = F.relu(self.bn1(self.conv1(x3)))\n        return x4\n            \n\nclass UNetSmol(nn.Module):\n    def __init__(self, input_channels=1, output_channels=1):\n        super().__init__()\n\n        # Encoder\n        self.down1 = DownBlock(in_channels=input_channels, out_channels=16)\n        self.down2 = DownBlock(in_channels=16, out_channels=32)\n\n        # Bottleneck\n        self.conv3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm2d(num_features=64)\n\n        # Decoder\n        self.up1 = UpBlock(in_channels=64, residual_channels=32, out_channels=32)\n        self.up2 = UpBlock(in_channels=32, residual_channels=16, out_channels=16)\n        self.conv6 = nn.Conv2d(in_channels=16, out_channels=output_channels, kernel_size=1)\n\n        # combined with bottlenect output\n        self.time_embedder = SinusoidBlock(embedding_dim=32)\n        self.time_embedder_1 = TimeBlock(in_features=32, out_features=64)\n        self.time_embedder_2 = TimeBlock(in_features=32, out_features=32)\n        self.label_encoder_1 = ContextBlock(in_features=10, out_features=64)\n        self.label_encoder_2 = ContextBlock(in_features=10, out_features=32)\n\n\n    def forward(self, x, t, labels=None):\n        # Down\n        x1, x2 = self.down1(x)\n        x3, x4 = self.down2(x2)\n\n        # Bottleneck\n        x5 = F.relu(self.bn3(self.conv3(x4)))\n\n        # Up\n        t = self.time_embedder(t)\n        time_embedding_1 = self.time_embedder_1(t)\n\n        label_embedding_1 = self.label_encoder_1(labels)\n        x5 = label_embedding_1 * x5 + time_embedding_1\n        \n        x6 = self.up1(x5, x3)\n\n        time_embedding_2 = self.time_embedder_2(t)\n        label_embedding_2 = self.label_encoder_2(labels)\n        x6 = label_embedding_2 * x6 + time_embedding_2\n\n        x7 = self.up2(x6, x1)\n        \n\n        x8 = self.conv6(x7)\n        return x8\n</pre> class SinusoidBlock(nn.Module):     def __init__(self, embedding_dim):         super().__init__()         self.embedding_dim = embedding_dim      def forward(self, time):         device = time.device         half = self.embedding_dim // 2         embeddings = math.log(10000) / (half - 1)         embeddings = torch.exp(torch.arange(half, device=device) * -embeddings)         embeddings = time[:, None] * embeddings[None, :]         embeddings = torch.cat((embeddings.sin(), embeddings.cos()), dim=-1)         return embeddings   class TimeBlock(nn.Module):     def __init__(self, in_features, out_features):         super().__init__()         self.in_features = in_features         layers = [             nn.Linear(in_features=in_features, out_features=out_features),             nn.ReLU(),             nn.Linear(in_features=out_features, out_features=out_features),             nn.Unflatten(dim=1, unflattened_size=(out_features, 1, 1)),          ]         self.model = nn.Sequential(*layers)      def forward(self, input):         input = input.view(-1, self.in_features)         return self.model(input)   class ContextBlock(nn.Module):     def __init__(self, in_features, out_features):         super().__init__()         self.in_features = in_features         layers = [             nn.Linear(in_features=in_features, out_features=out_features),             nn.ReLU(),             nn.Linear(in_features=out_features, out_features=out_features),             nn.Unflatten(dim=1, unflattened_size=(out_features, 1, 1))         ]         self.model = nn.Sequential(*layers)      def forward(self, input):         input = input.view(-1, self.in_features)         return self.model(input)   class DownBlock(nn.Module):     def __init__(self, in_channels, out_channels):         super().__init__()          self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)         self.pool1 = nn.MaxPool2d(kernel_size=2)      def forward(self, x):         x1 = F.relu(self.bn1(self.conv1(x)))         x2 = self.pool1(x1)         return x1, x2       class UpBlock(nn.Module):     def __init__(self, in_channels, residual_channels, out_channels):         super().__init__()          self.upconv1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)         self.conv1 = nn.Conv2d(in_channels=in_channels + residual_channels, out_channels=out_channels, kernel_size=3, padding=1)         self.bn1 = nn.BatchNorm2d(num_features=out_channels)         # self.conv2 = nn.Conv2d(in_channels=8, out_channels=out_channels//2, kernel_size=3, padding=1)       def forward(self, x1, residual):         x3 = self.upconv1(x1)         x3 = torch.cat([x3, residual], dim=1)         x4 = F.relu(self.bn1(self.conv1(x3)))         return x4               class UNetSmol(nn.Module):     def __init__(self, input_channels=1, output_channels=1):         super().__init__()          # Encoder         self.down1 = DownBlock(in_channels=input_channels, out_channels=16)         self.down2 = DownBlock(in_channels=16, out_channels=32)          # Bottleneck         self.conv3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1)         self.bn3 = nn.BatchNorm2d(num_features=64)          # Decoder         self.up1 = UpBlock(in_channels=64, residual_channels=32, out_channels=32)         self.up2 = UpBlock(in_channels=32, residual_channels=16, out_channels=16)         self.conv6 = nn.Conv2d(in_channels=16, out_channels=output_channels, kernel_size=1)          # combined with bottlenect output         self.time_embedder = SinusoidBlock(embedding_dim=32)         self.time_embedder_1 = TimeBlock(in_features=32, out_features=64)         self.time_embedder_2 = TimeBlock(in_features=32, out_features=32)         self.label_encoder_1 = ContextBlock(in_features=10, out_features=64)         self.label_encoder_2 = ContextBlock(in_features=10, out_features=32)       def forward(self, x, t, labels=None):         # Down         x1, x2 = self.down1(x)         x3, x4 = self.down2(x2)          # Bottleneck         x5 = F.relu(self.bn3(self.conv3(x4)))          # Up         t = self.time_embedder(t)         time_embedding_1 = self.time_embedder_1(t)          label_embedding_1 = self.label_encoder_1(labels)         x5 = label_embedding_1 * x5 + time_embedding_1                  x6 = self.up1(x5, x3)          time_embedding_2 = self.time_embedder_2(t)         label_embedding_2 = self.label_encoder_2(labels)         x6 = label_embedding_2 * x6 + time_embedding_2          x7 = self.up2(x6, x1)                   x8 = self.conv6(x7)         return x8 In\u00a0[46]: Copied! <pre>model = UNetSmol(1, 1)\noptimizer = optim.AdamW(model.parameters(), lr=0.001)\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n</pre> model = UNetSmol(1, 1) optimizer = optim.AdamW(model.parameters(), lr=0.001)  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') In\u00a0[47]: Copied! <pre>sample_image, target, label = next(iter(train_loader))\nloss = loss_function(model, sample_image, torch.tensor(0).unsqueeze(0), label)\n</pre> sample_image, target, label = next(iter(train_loader)) loss = loss_function(model, sample_image, torch.tensor(0).unsqueeze(0), label) In\u00a0[\u00a0]: Copied! <pre>num_epochs = 10\n\nlosses = []\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n\n    for sample_image, target, label in tqdm(train_loader):\n        sample_image = sample_image.to(device)\n        target = target.to(device)\n        label = label.to(device)\n        optimizer.zero_grad()\n        t = torch.randint(0, T, (32,), device=device)\n        # t = t.float()\n        loss = loss_function(model, sample_image, t, label)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n\n        losses.append(loss.item())\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')\n</pre> num_epochs = 10  losses = []  for epoch in range(num_epochs):     model.train()     running_loss = 0.0      for sample_image, target, label in tqdm(train_loader):         sample_image = sample_image.to(device)         target = target.to(device)         label = label.to(device)         optimizer.zero_grad()         t = torch.randint(0, T, (32,), device=device)         # t = t.float()         loss = loss_function(model, sample_image, t, label)         loss.backward()         optimizer.step()         running_loss += loss.item()          losses.append(loss.item())      print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')  In\u00a0[49]: Copied! <pre>sqrt_a_inv = torch.sqrt(1 / alpha)\npred_noise_coeff = (1 - alpha) / torch.sqrt(1 - alpha_bar)\n</pre> sqrt_a_inv = torch.sqrt(1 / alpha) pred_noise_coeff = (1 - alpha) / torch.sqrt(1 - alpha_bar) In\u00a0[50]: Copied! <pre>@torch.no_grad()\ndef reverse_q(x_t, t, epsilon_t):\n    t = torch.squeeze(t[0].int())\n    pred_noise_coeff_t = pred_noise_coeff[t]\n    sqrt_a_inv_t = sqrt_a_inv[t]\n    u_t = sqrt_a_inv_t * (x_t - pred_noise_coeff_t * epsilon_t)\n    if t == 0:\n        return u_t\n    else:\n        beta_t = beta[t-1]\n        new_noise = torch.randn_like(x_t)\n        return u_t + torch.sqrt(beta_t) * new_noise\n</pre> @torch.no_grad() def reverse_q(x_t, t, epsilon_t):     t = torch.squeeze(t[0].int())     pred_noise_coeff_t = pred_noise_coeff[t]     sqrt_a_inv_t = sqrt_a_inv[t]     u_t = sqrt_a_inv_t * (x_t - pred_noise_coeff_t * epsilon_t)     if t == 0:         return u_t     else:         beta_t = beta[t-1]         new_noise = torch.randn_like(x_t)         return u_t + torch.sqrt(beta_t) * new_noise In\u00a0[48]: Copied! <pre># save model\ntorch.save(model.state_dict(), 'model_bigger.pth')\n</pre> # save model torch.save(model.state_dict(), 'model_bigger.pth') In\u00a0[53]: Copied! <pre>@torch.no_grad()\ndef sample_images(number=1):\n    x_t = torch.randn(1, 1, 28, 28, device=device)\n    label = torch.zeros(1, 10, device=device)\n    label[0, number] = 1\n    x_ts = []\n    for i in tqdm(range(0, T)[::-1]):\n        t = torch.full((1,), i, device=device)\n        t = t.float()\n        e_t = model(x_t, t, label)\n        x_t = reverse_q(x_t, t, e_t)\n        x_ts.append(x_t)\n\n    return x_ts\n</pre> @torch.no_grad() def sample_images(number=1):     x_t = torch.randn(1, 1, 28, 28, device=device)     label = torch.zeros(1, 10, device=device)     label[0, number] = 1     x_ts = []     for i in tqdm(range(0, T)[::-1]):         t = torch.full((1,), i, device=device)         t = t.float()         e_t = model(x_t, t, label)         x_t = reverse_q(x_t, t, e_t)         x_ts.append(x_t)      return x_ts In\u00a0[56]: Copied! <pre>plt.figure(figsize=(12, 5))\nmodel.eval()\nfor i in range(10):\n    x_t = sample_images(number=i)[-1]\n    img = torch.squeeze(input=x_t).cpu()\n    ax = plt.subplot(2, 5, i + 1)\n    ax.axis('off')\n    plt.imshow(img, cmap='gray')\n</pre> plt.figure(figsize=(12, 5)) model.eval() for i in range(10):     x_t = sample_images(number=i)[-1]     img = torch.squeeze(input=x_t).cpu()     ax = plt.subplot(2, 5, i + 1)     ax.axis('off')     plt.imshow(img, cmap='gray')  <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 381.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 484.47it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 470.51it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 429.09it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 433.80it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 528.28it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 524.94it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 500.75it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 528.19it/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 150/150 [00:00&lt;00:00, 492.00it/s]\n</pre> <p>So we stopped things short, but this isn't terrible...OK, it's terrible. Let's abstract out some of this code, and try again...</p>"},{"location":"DDPM/4_diffusion/#diffusion","title":"Diffusion\u00b6","text":"<p>OK, this is the big step up to diffusion. We are going to need to rethink our approach to produce coherence from noise.</p>"},{"location":"DDPM/4_diffusion/#variance-schedule","title":"Variance schedule\u00b6","text":"<p>First implement our beta scheduler. There are many different types of schedules that can be used, such as linear, cosine, quadratic, etc. We will use a linear schedule to keep things simple. We also need to pick a value for $T$, the number of steps. We will use $T=150$. Adding more steps will increase the quality of the generated images, but will also increase the time it takes to train the model.</p>"},{"location":"DDPM/4_diffusion/#forward-diffusion","title":"Forward diffusion\u00b6","text":"<p>If you remember, the forward diffusion process can be written as:</p> <p>$$ x_t = \\sqrt{\\bar{\\alpha}_t}x_0 + \\sqrt{1-\\bar{\\alpha}_t}\\epsilon $$</p> <p>where $\\epsilon \\sim N(0, 1)$</p>"},{"location":"DDPM/4_diffusion/#loss-function-and-conditional-u-net","title":"Loss function and conditional U-Net\u00b6","text":"<p>We define a loss function that finds the MSE between the noise predicted by the model, and the total noise (i.e. pure noise).</p>"},{"location":"DDPM/4_diffusion/#sampling","title":"Sampling\u00b6","text":""},{"location":"DDPM/5_diffusion_part2/","title":"Diffusion Part 2","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport torch\nimport torch.optim as optim\nimport sys\nimport numpy as np\n</pre> import matplotlib.pyplot as plt import torch import torch.optim as optim import sys import numpy as np In\u00a0[2]: Copied! <pre>sys.path.append('..') # Add parent directory to path so we can grab the code that we need in the diffusion_models directory\nfrom diffusion_models.utils import *\nfrom diffusion_models.unet import UNetSmol\nfrom diffusion_models.ddpm import DDPM\n\nDATA_PATH = '../data/'\ntrain_loader, test_loader = get_mnist(32, DATA_PATH)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n</pre> sys.path.append('..') # Add parent directory to path so we can grab the code that we need in the diffusion_models directory from diffusion_models.utils import * from diffusion_models.unet import UNetSmol from diffusion_models.ddpm import DDPM  DATA_PATH = '../data/' train_loader, test_loader = get_mnist(32, DATA_PATH)  device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\") In\u00a0[59]: Copied! <pre>unet = UNetSmol(input_channels=1,\n                output_channels=1,\n                block_channels=[32,64,128])\noptimizer = optim.AdamW(unet.parameters(), lr=0.001)\n</pre> unet = UNetSmol(input_channels=1,                 output_channels=1,                 block_channels=[32,64,128]) optimizer = optim.AdamW(unet.parameters(), lr=0.001) In\u00a0[61]: Copied! <pre>scheduler = DDPM(\n    model = unet,\n    optimizer = optimizer,\n    T = 500,\n    start = 0.0001,\n    end = 0.02,\n)\n</pre> scheduler = DDPM(     model = unet,     optimizer = optimizer,     T = 500,     start = 0.0001,     end = 0.02, ) In\u00a0[62]: Copied! <pre>losses, t_values = scheduler.train(train_loader, epochs=20)\n</pre> losses, t_values = scheduler.train(train_loader, epochs=20) <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:35&lt;00:00,  8.71it/s]\n</pre> <pre>Epoch [1/20], Loss: 0.0757\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:35&lt;00:00,  8.71it/s]\n</pre> <pre>Epoch [2/20], Loss: 0.0541\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:31&lt;00:00,  8.88it/s]\n</pre> <pre>Epoch [3/20], Loss: 0.0502\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:27&lt;00:00,  9.03it/s]\n</pre> <pre>Epoch [4/20], Loss: 0.0478\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:28&lt;00:00,  8.99it/s]\n</pre> <pre>Epoch [5/20], Loss: 0.0458\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:28&lt;00:00,  9.00it/s]\n</pre> <pre>Epoch [6/20], Loss: 0.0444\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:28&lt;00:00,  8.98it/s]\n</pre> <pre>Epoch [7/20], Loss: 0.0445\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:27&lt;00:00,  9.04it/s]\n</pre> <pre>Epoch [8/20], Loss: 0.0433\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:36&lt;00:00,  8.68it/s]\n</pre> <pre>Epoch [9/20], Loss: 0.0427\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:30&lt;00:00,  8.89it/s]\n</pre> <pre>Epoch [10/20], Loss: 0.0425\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:27&lt;00:00,  9.05it/s]\n</pre> <pre>Epoch [11/20], Loss: 0.0424\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:37&lt;00:00,  8.61it/s]\n</pre> <pre>Epoch [12/20], Loss: 0.0420\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:30&lt;00:00,  8.92it/s]\n</pre> <pre>Epoch [13/20], Loss: 0.0418\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:31&lt;00:00,  8.88it/s]\n</pre> <pre>Epoch [14/20], Loss: 0.0414\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:27&lt;00:00,  9.06it/s]\n</pre> <pre>Epoch [15/20], Loss: 0.0411\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:32&lt;00:00,  8.83it/s]\n</pre> <pre>Epoch [16/20], Loss: 0.0411\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:31&lt;00:00,  8.87it/s]\n</pre> <pre>Epoch [17/20], Loss: 0.0409\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:39&lt;00:00,  8.55it/s]\n</pre> <pre>Epoch [18/20], Loss: 0.0406\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:32&lt;00:00,  8.84it/s]\n</pre> <pre>Epoch [19/20], Loss: 0.0406\n</pre> <pre>Training: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1875/1875 [03:30&lt;00:00,  8.91it/s]</pre> <pre>Epoch [20/20], Loss: 0.0404\n</pre> <pre>\n</pre> In\u00a0[110]: Copied! <pre>batch_size = 32\nn_batches = len(losses) // batch_size\n\n# Calculate which training step (batch number) each sample came from\ntraining_steps = np.repeat(range(n_batches), batch_size)[:len(losses)]\nbatch_losses = np.array(losses[:n_batches * batch_size]).reshape(-1, batch_size).mean(axis=1)\nbatch_t = np.array(t_values[:n_batches * batch_size]).reshape(-1, batch_size).mean(axis=1)\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5), sharex=True)\n\nax1.plot(range(len(batch_losses)), batch_losses)\nax1.set_xlabel('Step')\nax1.set_ylabel('Average Loss')\nax1.set_title('Average Loss per Batch')\nax1.grid()\n\n# Select a few timesteps to plot\nunique_t = np.unique(t_values)\nn_curves = 10\n# Use exponential spacing to get more samples at lower timesteps\nindices = np.geomspace(1, len(unique_t), n_curves).astype(int) - 1\nselected_t = unique_t[indices]\n\nfor t in selected_t[1:]:\n    # Get losses and corresponding training steps for this timestep\n    mask = np.array(t_values) == t\n    t_losses = np.array(losses)[mask]\n    t_steps = training_steps[mask]\n    \n    # Sort by training steps to ensure correct plotting order\n    sort_idx = np.argsort(t_steps)\n    t_losses = t_losses[sort_idx]\n    t_steps = t_steps[sort_idx]\n\n    window = 51  # Must be odd number\n    smoothed_losses = np.convolve(t_losses, np.ones(window)/window, mode='valid')\n    valid_steps = t_steps[window//2:-(window//2)]\n\n    ax2.plot(t_steps, t_losses, alpha=0.2, lw=0.5)\n    ax2.plot(valid_steps, smoothed_losses, label=f't={int(t)+1}', alpha=1., lw=0.5)\n    \n    \nax2.set_xlabel('Step')\nax2.set_ylabel('Average Loss')\nax2.set_title('Loss Curves for Different Timesteps')\nax2.set_ylim(-0.05, 1.25)\nax2.grid(True, alpha=0.3)\nax2.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\n\nplt.tight_layout()\nfig.subplots_adjust(right=0.85)\nplt.show()\n</pre> batch_size = 32 n_batches = len(losses) // batch_size  # Calculate which training step (batch number) each sample came from training_steps = np.repeat(range(n_batches), batch_size)[:len(losses)] batch_losses = np.array(losses[:n_batches * batch_size]).reshape(-1, batch_size).mean(axis=1) batch_t = np.array(t_values[:n_batches * batch_size]).reshape(-1, batch_size).mean(axis=1)   fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5), sharex=True)  ax1.plot(range(len(batch_losses)), batch_losses) ax1.set_xlabel('Step') ax1.set_ylabel('Average Loss') ax1.set_title('Average Loss per Batch') ax1.grid()  # Select a few timesteps to plot unique_t = np.unique(t_values) n_curves = 10 # Use exponential spacing to get more samples at lower timesteps indices = np.geomspace(1, len(unique_t), n_curves).astype(int) - 1 selected_t = unique_t[indices]  for t in selected_t[1:]:     # Get losses and corresponding training steps for this timestep     mask = np.array(t_values) == t     t_losses = np.array(losses)[mask]     t_steps = training_steps[mask]          # Sort by training steps to ensure correct plotting order     sort_idx = np.argsort(t_steps)     t_losses = t_losses[sort_idx]     t_steps = t_steps[sort_idx]      window = 51  # Must be odd number     smoothed_losses = np.convolve(t_losses, np.ones(window)/window, mode='valid')     valid_steps = t_steps[window//2:-(window//2)]      ax2.plot(t_steps, t_losses, alpha=0.2, lw=0.5)     ax2.plot(valid_steps, smoothed_losses, label=f't={int(t)+1}', alpha=1., lw=0.5)           ax2.set_xlabel('Step') ax2.set_ylabel('Average Loss') ax2.set_title('Loss Curves for Different Timesteps') ax2.set_ylim(-0.05, 1.25) ax2.grid(True, alpha=0.3) ax2.legend(bbox_to_anchor=(1.01, 1), loc='upper left')  plt.tight_layout() fig.subplots_adjust(right=0.85) plt.show() <p>Sure enough, the average loss per batch appears to have plateaued. When we look at the loss from individual timesteps however, we can see that the curves corresponding to low values of t are still decreasing. Had we stopped training based on the left plot, we would be depriving our model of learning those fine details and relationships.</p> In\u00a0[94]: Copied! <pre>x_ts = scheduler.sample(6, 10)\nx_ts = np.array(x_ts)\n</pre> x_ts = scheduler.sample(6, 10) x_ts = np.array(x_ts) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 500/500 [00:05&lt;00:00, 85.25it/s]\n</pre> In\u00a0[95]: Copied! <pre>plt.figure(figsize=(25,5))\n\nsingle = x_ts[:, 0, :, :]\n\nfor t in range(scheduler.T):\n    img = single[t].squeeze()\n    ax = plt.subplot(10, 50, t + 1)\n    ax.axis(\"off\")\n    plt.imshow(img, cmap=\"gray\")\n</pre> plt.figure(figsize=(25,5))  single = x_ts[:, 0, :, :]  for t in range(scheduler.T):     img = single[t].squeeze()     ax = plt.subplot(10, 50, t + 1)     ax.axis(\"off\")     plt.imshow(img, cmap=\"gray\") In\u00a0[97]: Copied! <pre>example = x_ts[-1]\n\nplt.figure(figsize=(10, 5))\nfor i in range(10):\n    img = example[i][0]\n    ax = plt.subplot(2, 5, i + 1)\n    ax.axis('off')\n    plt.imshow(img, cmap='gray')\n</pre> example = x_ts[-1]  plt.figure(figsize=(10, 5)) for i in range(10):     img = example[i][0]     ax = plt.subplot(2, 5, i + 1)     ax.axis('off')     plt.imshow(img, cmap='gray') <p>These results are really not bad considering that we only trained a very small model on a few epochs! Feel free to adjust the hyperparameters however you want. You'll notice that as you increase the number of epochs and the size of the model, you'll get significantly better results.</p>"},{"location":"DDPM/5_diffusion_part2/#diffusion-part-2","title":"Diffusion Part 2\u00b6","text":"<p>Now that we have walked through the diffusion process, we can abstract everything away into some classes and folders. We have stored our U-Net in a python file <code>unet.py</code>, the data loading into a <code>utils.py</code> files, and finally, the main diffusion algorthim in the <code>ddpm.py</code> file. From here on, we call the <code>DDPM</code> class the <code>scheduler</code>...because that's essentially what it does.</p> <p>So now we can simply import all these classes and run the diffusion process in a few lines of code.</p>"},{"location":"DDPM/5_diffusion_part2/#get-the-data","title":"Get the data\u00b6","text":""},{"location":"DDPM/5_diffusion_part2/#get-the-model-and-optimizer","title":"Get the model and optimizer\u00b6","text":""},{"location":"DDPM/5_diffusion_part2/#define-the-scheduler","title":"Define the scheduler\u00b6","text":"<p>We will increase the steps to 500. In many bigger and better models, the steps could be in the thousands.</p>"},{"location":"DDPM/5_diffusion_part2/#train-for-a-few-epochs","title":"Train for a few epochs\u00b6","text":"<p>Here, \"a few\" epochs is actually 20. This will probably take over an hour to run on something like a Macbook Pro, so you might want to reduce this down (or increase it if you want to push the model!)</p>"},{"location":"DDPM/5_diffusion_part2/#loss-curves","title":"Loss curves\u00b6","text":"<p>It is well know that loss curves in diffusion models seem to suddenly decrease and then become very noisy and \"converge\". This behaviour is expected in diffusion models. Predicting noise is actually fairly easy when t is very high, and the model therefore becomes very good early on in the training. However, the model also needs to be able to predict low noise (i.e. when t is small), which it remains bad at.</p> <p>When you just look at the loss for all values of t mixed up, you can't see the progress. However if you look at each loss curves for only a single value of t, you will see improvement.</p> <p>Let's test this theory but first plotting the overall loss for each batch, and then the loss function for each time step.</p>"},{"location":"DDPM/5_diffusion_part2/#sampling","title":"Sampling\u00b6","text":"<p>Let's sample a number from the model, for example the number 6.</p>"},{"location":"DDPM/5_diffusion_part2/#next-steps","title":"Next steps\u00b6","text":"<p>We built a lot of this from scratch. Surely someone has done this process for us already? Yes, they have! The <code>diffusers</code> library is a PyTorch library that implements the diffusion process and provides a lot of utilities to make the process easier.</p>"},{"location":"DDPM/6_hf_diffusers/","title":"Hugging Face Diffusers","text":"In\u00a0[23]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom datasets import load_dataset\nfrom diffusers import DDPMScheduler, UNet2DModel\nfrom diffusers.optimization import get_cosine_schedule_with_warmup\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision import datasets, transforms\nfrom tqdm import tqdm\n</pre> import matplotlib.pyplot as plt import numpy as np import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from datasets import load_dataset from diffusers import DDPMScheduler, UNet2DModel from diffusers.optimization import get_cosine_schedule_with_warmup from torch.utils.data import DataLoader, Dataset from torchvision import datasets, transforms from tqdm import tqdm In\u00a0[24]: Copied! <pre>model = UNet2DModel(\n    sample_size=28,                # 28x28 input\n    in_channels=1,                 # 1 channel (grayscale)\n    out_channels=1,                # 1 channel output\n    layers_per_block=1,            # 1 layer per block, this can make your model large\n    block_out_channels=(4, 8, 16), # 3 blocks with 4, 8, and 16 channels\n    down_block_types=(\n        \"DownBlock2D\",             # A resnet block\n        \"DownBlock2D\",\n        \"DownBlock2D\",\n    ),\n    up_block_types=(\n        \"UpBlock2D\",               # Upsampling block\n        \"UpBlock2D\",\n        \"UpBlock2D\",\n    ),\n    num_class_embeds=10,           # 10 class embeddings for the 10 digits\n    norm_num_groups=2,             # 2 groups for normalization, you will have to change this if you change the number of channels in your blocks\n)\n</pre> model = UNet2DModel(     sample_size=28,                # 28x28 input     in_channels=1,                 # 1 channel (grayscale)     out_channels=1,                # 1 channel output     layers_per_block=1,            # 1 layer per block, this can make your model large     block_out_channels=(4, 8, 16), # 3 blocks with 4, 8, and 16 channels     down_block_types=(         \"DownBlock2D\",             # A resnet block         \"DownBlock2D\",         \"DownBlock2D\",     ),     up_block_types=(         \"UpBlock2D\",               # Upsampling block         \"UpBlock2D\",         \"UpBlock2D\",     ),     num_class_embeds=10,           # 10 class embeddings for the 10 digits     norm_num_groups=2,             # 2 groups for normalization, you will have to change this if you change the number of channels in your blocks ) In\u00a0[25]: Copied! <pre>model\n</pre> model Out[25]: <pre>UNet2DModel(\n  (conv_in): Conv2d(1, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (time_proj): Timesteps()\n  (time_embedding): TimestepEmbedding(\n    (linear_1): Linear(in_features=4, out_features=16, bias=True)\n    (act): SiLU()\n    (linear_2): Linear(in_features=16, out_features=16, bias=True)\n  )\n  (class_embedding): Embedding(10, 16)\n  (down_blocks): ModuleList(\n    (0): DownBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 4, eps=1e-05, affine=True)\n          (conv1): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=4, bias=True)\n          (norm2): GroupNorm(2, 4, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n        )\n      )\n      (downsamplers): ModuleList(\n        (0): Downsample2D(\n          (conv): Conv2d(4, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n        )\n      )\n    )\n    (1): DownBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 4, eps=1e-05, affine=True)\n          (conv1): Conv2d(4, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=8, bias=True)\n          (norm2): GroupNorm(2, 8, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(4, 8, kernel_size=(1, 1), stride=(1, 1))\n        )\n      )\n      (downsamplers): ModuleList(\n        (0): Downsample2D(\n          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n        )\n      )\n    )\n    (2): DownBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 8, eps=1e-05, affine=True)\n          (conv1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=16, bias=True)\n          (norm2): GroupNorm(2, 16, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))\n        )\n      )\n    )\n  )\n  (up_blocks): ModuleList(\n    (0): UpBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 32, eps=1e-05, affine=True)\n          (conv1): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=16, bias=True)\n          (norm2): GroupNorm(2, 16, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))\n        )\n        (1): ResnetBlock2D(\n          (norm1): GroupNorm(2, 24, eps=1e-05, affine=True)\n          (conv1): Conv2d(24, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=16, bias=True)\n          (norm2): GroupNorm(2, 16, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(24, 16, kernel_size=(1, 1), stride=(1, 1))\n        )\n      )\n      (upsamplers): ModuleList(\n        (0): Upsample2D(\n          (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (1): UpBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 24, eps=1e-05, affine=True)\n          (conv1): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=8, bias=True)\n          (norm2): GroupNorm(2, 8, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(24, 8, kernel_size=(1, 1), stride=(1, 1))\n        )\n        (1): ResnetBlock2D(\n          (norm1): GroupNorm(2, 12, eps=1e-05, affine=True)\n          (conv1): Conv2d(12, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=8, bias=True)\n          (norm2): GroupNorm(2, 8, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(12, 8, kernel_size=(1, 1), stride=(1, 1))\n        )\n      )\n      (upsamplers): ModuleList(\n        (0): Upsample2D(\n          (conv): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        )\n      )\n    )\n    (2): UpBlock2D(\n      (resnets): ModuleList(\n        (0): ResnetBlock2D(\n          (norm1): GroupNorm(2, 12, eps=1e-05, affine=True)\n          (conv1): Conv2d(12, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=4, bias=True)\n          (norm2): GroupNorm(2, 4, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(12, 4, kernel_size=(1, 1), stride=(1, 1))\n        )\n        (1): ResnetBlock2D(\n          (norm1): GroupNorm(2, 8, eps=1e-05, affine=True)\n          (conv1): Conv2d(8, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (time_emb_proj): Linear(in_features=16, out_features=4, bias=True)\n          (norm2): GroupNorm(2, 4, eps=1e-05, affine=True)\n          (dropout): Dropout(p=0.0, inplace=False)\n          (conv2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (nonlinearity): SiLU()\n          (conv_shortcut): Conv2d(8, 4, kernel_size=(1, 1), stride=(1, 1))\n        )\n      )\n    )\n  )\n  (mid_block): UNetMidBlock2D(\n    (attentions): ModuleList(\n      (0): Attention(\n        (group_norm): GroupNorm(2, 16, eps=1e-05, affine=True)\n        (to_q): Linear(in_features=16, out_features=16, bias=True)\n        (to_k): Linear(in_features=16, out_features=16, bias=True)\n        (to_v): Linear(in_features=16, out_features=16, bias=True)\n        (to_out): ModuleList(\n          (0): Linear(in_features=16, out_features=16, bias=True)\n          (1): Dropout(p=0.0, inplace=False)\n        )\n      )\n    )\n    (resnets): ModuleList(\n      (0-1): 2 x ResnetBlock2D(\n        (norm1): GroupNorm(2, 16, eps=1e-05, affine=True)\n        (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (time_emb_proj): Linear(in_features=16, out_features=16, bias=True)\n        (norm2): GroupNorm(2, 16, eps=1e-05, affine=True)\n        (dropout): Dropout(p=0.0, inplace=False)\n        (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (nonlinearity): SiLU()\n      )\n    )\n  )\n  (conv_norm_out): GroupNorm(2, 4, eps=1e-05, affine=True)\n  (conv_act): SiLU()\n  (conv_out): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n)</pre> In\u00a0[26]: Copied! <pre>transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\n\nDATA_PATH = '../data/'\n\ntrain_dataset = datasets.MNIST(root=DATA_PATH, train=True, download=True, transform=transform)\ntest_dataset = datasets.MNIST(root=DATA_PATH, train=False, download=True, transform=transform)\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n# \n</pre> transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])  DATA_PATH = '../data/'  train_dataset = datasets.MNIST(root=DATA_PATH, train=True, download=True, transform=transform) test_dataset = datasets.MNIST(root=DATA_PATH, train=False, download=True, transform=transform)  train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True) test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False) #  In\u00a0[27]: Copied! <pre>noise_scheduler = DDPMScheduler(num_train_timesteps=200,\n                                beta_start = 0.0001,\n                                beta_end = 0.02,\n                                beta_schedule = 'linear',\n                                prediction_type = 'epsilon'\n                                )\noptimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)\n\nnum_train_steps = len(train_loader) * 3\n\nlr_scheduler = get_cosine_schedule_with_warmup(\n    optimizer=optimizer,\n    num_warmup_steps=50,\n    num_training_steps=(num_train_steps),\n)\n</pre> noise_scheduler = DDPMScheduler(num_train_timesteps=200,                                 beta_start = 0.0001,                                 beta_end = 0.02,                                 beta_schedule = 'linear',                                 prediction_type = 'epsilon'                                 ) optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)  num_train_steps = len(train_loader) * 3  lr_scheduler = get_cosine_schedule_with_warmup(     optimizer=optimizer,     num_warmup_steps=50,     num_training_steps=(num_train_steps), ) <p>Let's see what the model looks like when we try to generate without any training...</p> In\u00a0[28]: Copied! <pre>@torch.no_grad()\ndef sample(model: UNet2DModel,\n              scheduler: DDPMScheduler,\n              batch_size: int,\n              generator: torch._C.Generator,\n              num_inference_steps: int,\n              label: int) -&gt; np.ndarray:\n    \n    image_shape = (batch_size, 1, 28, 28)\n    # if label is a list\n    if isinstance(label, list):\n        labels = torch.tensor(label)\n    else:\n        labels = torch.full((batch_size,), label)\n\n    image = torch.randn(image_shape)\n\n    # set step values\n    scheduler.set_timesteps(num_inference_steps)\n\n    for t in tqdm(scheduler.timesteps):\n        # 1. predict noise model_output\n        model_output = model(image, t, labels).sample\n\n        # 2. compute previous image: x_t -&gt; x_t-1\n        image = scheduler.step(model_output, t, image, generator=generator).prev_sample\n\n    image = (image / 2 + 0.5).clamp(0, 1)\n    image = image.permute(0, 2, 3, 1)\n\n    return image.detach().numpy()\n</pre> @torch.no_grad() def sample(model: UNet2DModel,               scheduler: DDPMScheduler,               batch_size: int,               generator: torch._C.Generator,               num_inference_steps: int,               label: int) -&gt; np.ndarray:          image_shape = (batch_size, 1, 28, 28)     # if label is a list     if isinstance(label, list):         labels = torch.tensor(label)     else:         labels = torch.full((batch_size,), label)      image = torch.randn(image_shape)      # set step values     scheduler.set_timesteps(num_inference_steps)      for t in tqdm(scheduler.timesteps):         # 1. predict noise model_output         model_output = model(image, t, labels).sample          # 2. compute previous image: x_t -&gt; x_t-1         image = scheduler.step(model_output, t, image, generator=generator).prev_sample      image = (image / 2 + 0.5).clamp(0, 1)     image = image.permute(0, 2, 3, 1)      return image.detach().numpy() In\u00a0[29]: Copied! <pre>images = sample(model=model,\n                   scheduler=noise_scheduler,\n                   batch_size=10,\n                   generator=torch.manual_seed(1337),\n                   num_inference_steps=200,\n                   label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n</pre> images = sample(model=model,                    scheduler=noise_scheduler,                    batch_size=10,                    generator=torch.manual_seed(1337),                    num_inference_steps=200,                    label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 200/200 [00:04&lt;00:00, 49.25it/s]\n</pre> In\u00a0[30]: Copied! <pre>fig, ax = plt.subplots(2, 5, figsize=(20, 8))\nfor i in range(10):\n    ax[i // 5, i % 5].imshow(images[i], cmap='gray')\n    ax[i // 5, i % 5].axis('off')\n</pre> fig, ax = plt.subplots(2, 5, figsize=(20, 8)) for i in range(10):     ax[i // 5, i % 5].imshow(images[i], cmap='gray')     ax[i // 5, i % 5].axis('off') In\u00a0[31]: Copied! <pre>def train(\n    model: UNet2DModel,\n    train_loader: DataLoader,\n    optimizer: optim.Optimizer,\n    noise_scheduler: DDPMScheduler,\n    lr_scheduler,\n    epochs: int,\n):\n    for epoch in range(epochs):\n        model.train()\n        for i, (clean_images, labels) in tqdm(enumerate(train_loader)):\n            noise = torch.randn(clean_images.shape)\n            bs = clean_images.shape[0]\n            labels = labels\n\n            timesteps = torch.randint(0, noise_scheduler.num_train_timesteps, (bs,), device=clean_images.device).long()\n            noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps)\n\n            noise_pred = model(noisy_images, timesteps, labels, return_dict=False)[0]\n            loss = F.mse_loss(noise_pred, noise)\n            loss.backward()\n            optimizer.step()\n            lr_scheduler.step()\n            optimizer.zero_grad()\n\n        \n        print(f'Epoch {epoch} Loss: {loss.item()}')\n\ntrain(\n    model=model,\n    train_loader=train_loader,\n    optimizer=optimizer,\n    noise_scheduler=noise_scheduler,\n    lr_scheduler=lr_scheduler,\n    epochs=3,\n)\n</pre> def train(     model: UNet2DModel,     train_loader: DataLoader,     optimizer: optim.Optimizer,     noise_scheduler: DDPMScheduler,     lr_scheduler,     epochs: int, ):     for epoch in range(epochs):         model.train()         for i, (clean_images, labels) in tqdm(enumerate(train_loader)):             noise = torch.randn(clean_images.shape)             bs = clean_images.shape[0]             labels = labels              timesteps = torch.randint(0, noise_scheduler.num_train_timesteps, (bs,), device=clean_images.device).long()             noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps)              noise_pred = model(noisy_images, timesteps, labels, return_dict=False)[0]             loss = F.mse_loss(noise_pred, noise)             loss.backward()             optimizer.step()             lr_scheduler.step()             optimizer.zero_grad()                   print(f'Epoch {epoch} Loss: {loss.item()}')  train(     model=model,     train_loader=train_loader,     optimizer=optimizer,     noise_scheduler=noise_scheduler,     lr_scheduler=lr_scheduler,     epochs=3, )  <pre>0it [00:00, ?it/s]</pre> <pre>/usr/local/lib/python3.10/dist-packages/diffusers/configuration_utils.py:140: FutureWarning: Accessing config attribute `num_train_timesteps` directly via 'DDPMScheduler' object attribute is deprecated. Please access 'num_train_timesteps' over 'DDPMScheduler's config object instead, e.g. 'scheduler.config.num_train_timesteps'.\n  deprecate(\"direct config name access\", \"1.0.0\", deprecation_message, standard_warn=False)\n1875it [02:12, 14.18it/s]\n</pre> <pre>Epoch 0 Loss: 0.08168818056583405\n</pre> <pre>1875it [02:20, 13.39it/s]\n</pre> <pre>Epoch 1 Loss: 0.06413132697343826\n</pre> <pre>1875it [02:00, 15.59it/s]</pre> <pre>Epoch 2 Loss: 0.07496078312397003\n</pre> <pre>\n</pre> <p>Now let's try sampling again...</p> In\u00a0[32]: Copied! <pre>images = sample(model=model,\n                   scheduler=noise_scheduler,\n                   batch_size=10,\n                   generator=torch.manual_seed(1337),\n                   num_inference_steps=200,\n                   label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n</pre> images = sample(model=model,                    scheduler=noise_scheduler,                    batch_size=10,                    generator=torch.manual_seed(1337),                    num_inference_steps=200,                    label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 200/200 [00:03&lt;00:00, 51.46it/s]\n</pre> In\u00a0[33]: Copied! <pre># show images\n\nfig, ax = plt.subplots(2, 5, figsize=(20, 8))\nfor i in range(10):\n    ax[i // 5, i % 5].imshow(images[i], cmap='gray')\n    ax[i // 5, i % 5].axis('off')\n</pre> # show images  fig, ax = plt.subplots(2, 5, figsize=(20, 8)) for i in range(10):     ax[i // 5, i % 5].imshow(images[i], cmap='gray')     ax[i // 5, i % 5].axis('off') <p>The model is definitely trying... some digits are recognizable, but many are not! Let's increase the number of layers per block and the size of the blocks to see if we can get some better results.</p> In\u00a0[34]: Copied! <pre>model = UNet2DModel(\n    sample_size=28,\n    in_channels=1,\n    out_channels=1,\n    layers_per_block=1,\n    block_out_channels=(8, 16, 32),\n    down_block_types=(\n        \"DownBlock2D\",\n        \"DownBlock2D\",\n        \"DownBlock2D\",\n    ),\n    up_block_types=(\n        \"UpBlock2D\",\n        \"UpBlock2D\",\n        \"UpBlock2D\",\n    ),\n    num_class_embeds=10,\n    norm_num_groups=2,\n)\n</pre> model = UNet2DModel(     sample_size=28,     in_channels=1,     out_channels=1,     layers_per_block=1,     block_out_channels=(8, 16, 32),     down_block_types=(         \"DownBlock2D\",         \"DownBlock2D\",         \"DownBlock2D\",     ),     up_block_types=(         \"UpBlock2D\",         \"UpBlock2D\",         \"UpBlock2D\",     ),     num_class_embeds=10,     norm_num_groups=2, ) In\u00a0[35]: Copied! <pre>noise_scheduler = DDPMScheduler(num_train_timesteps=200)\noptimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)\n\nnum_train_steps = len(train_loader) * 5\n\nlr_scheduler = get_cosine_schedule_with_warmup(\n    optimizer=optimizer,\n    num_warmup_steps=50,\n    num_training_steps=(num_train_steps),\n)\n</pre> noise_scheduler = DDPMScheduler(num_train_timesteps=200) optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)  num_train_steps = len(train_loader) * 5  lr_scheduler = get_cosine_schedule_with_warmup(     optimizer=optimizer,     num_warmup_steps=50,     num_training_steps=(num_train_steps), ) In\u00a0[5]: Copied! <pre>train(\n    model=model,\n    train_loader=train_loader,\n    optimizer=optimizer,\n    noise_scheduler=noise_scheduler,\n    lr_scheduler=lr_scheduler,\n    epochs=5,\n)\n</pre> train(     model=model,     train_loader=train_loader,     optimizer=optimizer,     noise_scheduler=noise_scheduler,     lr_scheduler=lr_scheduler,     epochs=5, ) <pre>0it [00:00, ?it/s]/usr/local/lib/python3.10/dist-packages/diffusers/configuration_utils.py:140: FutureWarning: Accessing config attribute `num_train_timesteps` directly via 'DDPMScheduler' object attribute is deprecated. Please access 'num_train_timesteps' over 'DDPMScheduler's config object instead, e.g. 'scheduler.config.num_train_timesteps'.\n  deprecate(\"direct config name access\", \"1.0.0\", deprecation_message, standard_warn=False)\n1875it [05:13,  5.98it/s]\n</pre> <pre>Epoch 0 Loss: 0.05497313663363457\n</pre> <pre>1875it [05:28,  5.71it/s]\n</pre> <pre>Epoch 1 Loss: 0.03213882073760033\n</pre> <pre>1875it [04:57,  6.30it/s]\n</pre> <pre>Epoch 2 Loss: 0.033250607550144196\n</pre> <pre>1875it [04:53,  6.38it/s]\n</pre> <pre>Epoch 3 Loss: 0.031056445091962814\n</pre> <pre>1875it [04:51,  6.44it/s]</pre> <pre>Epoch 4 Loss: 0.03150348365306854\n</pre> <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre># save model and scheduler\ntorch.save(model.state_dict(), 'model.pth')\n</pre> # save model and scheduler torch.save(model.state_dict(), 'model.pth') In\u00a0[19]: Copied! <pre>images = sample(model=model,\n                   scheduler=noise_scheduler,\n                   batch_size=10,\n                   generator=torch.manual_seed(1337),\n                   num_inference_steps=200,\n                   label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n</pre> images = sample(model=model,                    scheduler=noise_scheduler,                    batch_size=10,                    generator=torch.manual_seed(1337),                    num_inference_steps=200,                    label=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In\u00a0[20]: Copied! <pre>fig, ax = plt.subplots(2, 5, figsize=(20, 8))\nfor i in range(10):\n    ax[i // 5, i % 5].imshow(images[i], cmap='gray')\n    ax[i // 5, i % 5].axis('off')\n</pre> fig, ax = plt.subplots(2, 5, figsize=(20, 8)) for i in range(10):     ax[i // 5, i % 5].imshow(images[i], cmap='gray')     ax[i // 5, i % 5].axis('off') <pre>\nThe Kernel crashed while executing code in the current cell or a previous cell. \n\nPlease review the code in the cell(s) to identify a possible cause of the failure. \n\nClick &lt;a href='https://aka.ms/vscodeJupyterKernelCrash'&gt;here&lt;/a&gt; for more info. \n\nView Jupyter &lt;a href='command:jupyter.viewOutput'&gt;log&lt;/a&gt; for further details.</pre> <p>That is significantly better! Just think about what we've managed to do here. We've trained a model to generate MNIST digits using only a CPU! This is a testament to the power of the <code>diffusers</code> library and the incredible work that the Hugging Face team has done to make it accessible to everyone. Having said that, these images are tiny in comparison to many images used in research today. In order to generate larger images, we would need to use a GPU.</p>"},{"location":"DDPM/6_hf_diffusers/#hugging-face-diffusers","title":"Hugging Face Diffusers\u00b6","text":"<p>In this notebook, we run through an example of generating MNIST digits using the Hugging Face <code>diffusers</code> library. As we will see, we will be able to produce high quality digits using only a CPU.</p>"},{"location":"DDPM/6_hf_diffusers/#define-our-model","title":"Define our model\u00b6","text":""},{"location":"DDPM/6_hf_diffusers/#load-data","title":"Load data\u00b6","text":""},{"location":"DDPM/6_hf_diffusers/#initialize-the-scheduler-and-optimizer","title":"Initialize the scheduler and optimizer\u00b6","text":""},{"location":"DDPM/6_hf_diffusers/#train-the-model","title":"Train the model\u00b6","text":"<p>So that was obviously terrible... Let's train the model for a few epochs and see how it improves.</p>"},{"location":"Ethics/","title":"Ethics in Diffusion Models","text":""},{"location":"Ethics/#ethics-in-diffusion-models","title":"Ethics in Diffusion Models","text":""},{"location":"Ethics/ethics/","title":"Case Studies","text":""},{"location":"Ethics/ethics/#case-studies","title":"Case studies","text":""},{"location":"Ethics/ethics/#ai-and-art","title":"AI and Art","text":"<p>The advent of AI art, powered by advanced generative models, has transformed the landscape of artistic creation and consumption. AI can generate artwork that is not only visually stunning but also pushes the boundaries of traditional art forms. However, this new frontier also raises significant ethical questions about authorship, originality, and the potential impact on the art community. This case study examines the ethical challenges associated with AI-generated art and explores the implications for artists, consumers, and society at large.</p> <p>As well as art work, we are also seeing a rise in AI generated social media content \u2013 people using fake \u201cinfluencers\u201d to generate revenue; interior designers offering examples of their work which is clearly AI generated; YouTubers generating artwork for their music playlists. Are any of these OK?</p> <p>Discussion Questions</p> <ul> <li> <p>What are the implications of AI art for traditional artists? How can the art community support human artists in an era of increasing AI involvement?</p> </li> <li> <p>Who owns the rights to AI-generated art\u2014the creator of the algorithm, the user who input the prompts, or the AI itself?</p> </li> <li> <p>Should there be a distinction between AI-generated art and human-created art in competitions and exhibitions?</p> </li> <li> <p>How might the rise of AI art change our understanding of creativity and artistic expression? Can AI introduce new styles, techniques, and forms of art.</p> </li> <li> <p>What policies do you think social media companies should put into place (if any)?</p> </li> <li> <p>Do you think there is a difference between art generated by closed vs open source models?</p> </li> </ul>"},{"location":"Ethics/ethics/#safety-and-generative-models","title":"Safety and generative models","text":"<p>Closed-source models like DALL-E, Midjourney, and others have implemented stringent safety measures to mitigate the risks of misuse. These models often come with built-in content filters to prevent the generation of harmful, inappropriate, or offensive material. For instance, DALL-E restricts the creation of images depicting violence, adult content, and other sensitive subjects. These guardrails are designed to ensure that the generated content adheres to ethical guidelines and complies with societal norms.</p> <p>Open-source models like Stable Diffusion have faced significant scrutiny due to their inherent accessibility, which can be both a strength and a potential risk. The release of Stable Diffusion 3 introduced extensive safety guardrails to address ethical concerns. These measures include stricter content filtering and mechanisms to limit the generation of harmful content. Some community users argue that these safety measures undermine the principles of open-source and hinder legitimate creative freedom.</p> <p>Discussion Questions</p> <ul> <li> <p>How can open-source diffusion models balance the need for creative freedom with the responsibility to prevent misuse?</p> </li> <li> <p>Are the current safety measures in models like Stable Diffusion 3 sufficient or too restrictive? </p> </li> <li> <p>In what ways can safety guardrails in diffusion models hinder or promote innovation? Should there be different standards for closed-source versus open-source models?</p> </li> <li> <p>How should the community be involved in defining and implementing ethical guidelines for open-source diffusion models? What are the potential benefits and drawbacks of community-driven content moderation?</p> </li> <li> <p>Compare the ethical responsibilities of companies managing closed-source diffusion models with those developing open-source models. Should the expectations and standards for ethical practices differ between these two types of models?</p> </li> </ul>"},{"location":"Ethics/ethics/#genai-in-academia","title":"GenAI in Academia","text":"<p>The rise of image generation models has led to speculation about how models like DALL-E are being used in academia. In a notable incident, several papers in biomedical research were retracted because they included AI-generated images that were not only scientifically inaccurate but also visually absurd. These images had passed through peer review undetected, raising serious concerns about the robustness of the review process. Although many journals have policies around language models, explicit guidance regarding image generation has lagged behind.</p> <p>Discussion Questions</p> <ul> <li> <p>What scientific research tasks (if any) are acceptable to complete with image generation models?</p> </li> <li> <p>Why are some tasks acceptable while others are not? Does this differ across disciplines?</p> </li> <li> <p>Can we finetune models specially aimed at producing academic figures?</p> </li> <li> <p>Should the model be credited as an author?</p> </li> <li> <p>Should journals require a declaration from authors regarding the use of AI-generated content in their submissions? How might such a policy be effectively enforced?</p> </li> <li> <p>How important is transparency in the use of generative AI for maintaining the credibility of scientific research?</p> </li> </ul>"},{"location":"Home/LICENSE/","title":"License","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"Home/about/","title":"About us","text":"<p>The Accelerate Programme for Scientific Discovery pursues research at the interface of AI and the sciences, generating new scientific insights and developing AI methods that can be deployed to advance scientific knowledge. This research is carried out in partnership with a community of scientists and AI specialists passionate about the use of AI to benefit science and society.</p> <p>As part of our work, we aim to put together some resources to help researchers in developing software.</p> <p>For more details please visit Our Website.</p>"},{"location":"Home/workshop/","title":"The Workshop","text":""},{"location":"Home/workshop/#the-workshop","title":"The Workshop","text":"<p>This material is designed to help you get started with Diffusion models.</p> <p>Although the material is designed to be followed in order, you can jump to any section you like. We usually run this event over a day, with a mix of lecture and group discussion. Here is a rough outline of the day:</p> Time Content 9:00am - 9:30am Registration and welcome refreshments 9:30am - 10:00am IntroductionIntroduction to Accelerate and overview of the workshop- What do you know about them - How do they work? - What can you use them for? - What are the ethical issues? - What do you intend to use them for? - Brief history of generative models 10:00am - 10:30am Inpsiration from Physics- Charge distributions- Probability distributions- First look at the diffusion algorithm 10:30am - 11:00am Break 11:00am - 11:30pm Autoencoders and VAEs 11:30am - 12:00pm UNet 12:00pm - 12:30pm CLIP 12:30pm - 1:30pm Lunch 1:30pm - 2:00pm The Diffusion Algorithm- Training- Sampling- Forward- Reverse- Classifier-free diffusion- (Un)conditional diffusion 2:00pm - 2:30pm History of Generative Models- GANs 2:30pm - 3:00pm Ethics An overview and discussion of some generative AI case studies 3:00pm - 3:30pm Break 3:30pm - 4:00pm Application- Some practical applications of Diffusion models, including in scientific research. - Hugging Face diffusers - Stable diffusion via the Hugging Face Hub 4:00pm - 4:30pm No Code Options 4:30pm - 5:00pm Closing"},{"location":"Introduction/Introduction/","title":"Introduction","text":""},{"location":"Introduction/Introduction/#introduction","title":"Introduction","text":""},{"location":"Introduction/running-locally/","title":"Running Locally","text":""},{"location":"Introduction/running-locally/#running-locally","title":"Running Locally","text":"<p>You can run the notebooks locally on your own machine by following the steps below.</p> <p>We recommend using <code>uv</code> for dependencies as it is much faster and automatically manages a <code>.venv</code> for you.</p> <p>However, you can also install dependencies with plain <code>pip</code> if you prefer.</p> <p>PyTorch (<code>torch</code>) is not included in the installation instructions below. PyTorch wheels differ depending on your system and can be very large if installed incorrectly. </p> <p>Please install the version suitable for your setup by following the official PyTorch installation guide.</p>"},{"location":"Introduction/running-locally/#1-cloning-the-repository","title":"1. Cloning the repository","text":"<p>Clone the repository to your machine: </p><pre><code>git clone https://github.com/acceleratescience/diffusion-models\ncd diffusion-models\n</code></pre> Alternatively, if you're using an IDE such as VS Code or PyCharm, you can paste the repository URL directly into the IDE's respective clone repository UI."},{"location":"Introduction/running-locally/#2-installing-dependencies-with-uv-preferred","title":"2. Installing dependencies with <code>uv</code> (preferred)","text":""},{"location":"Introduction/running-locally/#windows-powershell","title":"Windows (Powershell)","text":"<p>Install uv if needed: </p><pre><code>irm https://astral.sh/uv/install.ps1 | iex\n</code></pre> Create the virtual environment and install dependencies: <pre><code>uv sync\n</code></pre> Finally, activate the environment: <pre><code>.\\.venv\\Scripts\\activate\n</code></pre>"},{"location":"Introduction/running-locally/#macos-linux","title":"macOS / Linux","text":"<p>Install uv if needed: </p><pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> Create the virtual environment and install dependencies: <pre><code>uv sync\n</code></pre> Finally, activate the environment: <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"Introduction/running-locally/#3-installing-dependencies-with-pip-alternative","title":"3. Installing dependencies with <code>pip</code> (alternative)","text":""},{"location":"Introduction/running-locally/#windows-powershell_1","title":"Windows (Powershell)","text":"<p>Create and activate an empty virtual environment: </p><pre><code>python3 -m diffusion-models .venv\n.\\.venv\\Scripts\\activate\n</code></pre> Finally, install dependencies to virtual environment: <pre><code>pip install .\n</code></pre>"},{"location":"Introduction/running-locally/#macos-linux_1","title":"macOS / Linux","text":"<p>Create and activate an empty virtual environment: </p><pre><code>python3 -m diffusion-models .venv\nsource .venv\\bin\\activate\n</code></pre> Finally, install dependencies to virtual environment: <pre><code>pip install .\n</code></pre>"},{"location":"OpenSource/","title":"Open Source Communities","text":""},{"location":"OpenSource/#open-source-communities","title":"Open Source Communities","text":""},{"location":"Physics/Physics/","title":"Physics","text":""},{"location":"Physics/Physics/#inspiration-from-physics","title":"Inspiration from Physics","text":""}]}